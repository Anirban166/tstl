@import simplejson
@import math

<@
MAXDEPTH = 15

def klimitequal(o1,o2,k=0,klimit=MAXDEPTH):
    if k > klimit:
        return True
    if type(o1) != type(o2):
        return False
    if type(o1) == list:
        if len(o1) != len(o2):
            return False
        for i in xrange(0,len(o1)):
            if i > k:
                return True
            if not klimitequal(o1[i],o2[i],k+1):
                return False
    elif type(o1) == dict:
        for v in o1.keys():
            if v not in o2.keys():
                return False
            if not klimitequal(o1[v],o2[v],k+1):
                return False
    else:
        return o1 == o2

def isCircular(s,depth=0,seen = []):
    if depth > MAXDEPTH:
        return True
    for v in seen:
        if klimitequal(s,v):
            return True
    newSeen = seen + [s]
    if type(s) == list:
        for v in s:
            if isCircular(v,depth+1,newSeen):
                return True
    if type(s) == dict:
        for v in s.values():
            if isCircular(v,depth+1,newSeen):
                return True
    return False

def stringifyNans(s):
    if type(s) == float:
        if math.isnan(s):
            return "!NaN!"
        else:
            return s
    if type(s) == list:
        return list(map(stringifyNans, s))
    if type(s) == dict:
        return {k: stringifyNans(v) for k, v in s.items()}
    return s
@>

pool: <int> 3
pool: <string> 3
pool: <float> 3
pool: <bool> 2

pool: <list> 5
pool: <dict> 5
pool: <tuple> 5

pool: <structure> 3

pool: <istring> 3
pool: <ilevel> 3

pool: <jsonstring> 5

<int> := <[0..9]>
<int> = <int> * 10
<int> = <int> + <int>

<string> := ""
<string> += <["a","b"," ",":","\\","/","[","]","{","}"]>
<string> += ","
<string> += chr(9) #tab
<string> += chr(13) #return
<string> += chr(34) #double quote
<string> += chr(39) #single quote

<float> := float(<int>)
{ZeroDivisionError} <float> = <float> / <float>
<float> := float("Inf")
<float> := float("-Inf")
<float> := float("NaN")

<bool> := True
<bool> := False

# Ciruclar structures cannot be handled, so avoid them

<list> := []
(not isCircular(<list,1>)) and (not isCircular(<structure,1>)) -> ~<list>.append(~<structure>)

<dict> := {}
(not isCircular(<dict,1>)) and (not isCircular(<structure,1>)) -> ~<dict> [<string>] = ~<structure>

# if we build a circular structure, ok to get rid of it and start over
isCircular(<structure,1>) -> <structure> = None

<structure> := <int>
<structure> := <string>
<structure> := <float>
<structure> := <bool>
<structure> := <list>
<structure> := <dict>

<istring> := ""
<istring> += " "
<istring> += chr(9) # tab
<istring> += chr(13) # return

<ilevel> := <[0..5]>

#not isCircular(<structure,1>) -> <jsonstring> := simplejson.dumps(<structure>)
#not isCircular(<structure,1>) -> <jsonstring> := simplejson.dumps(<structure>, sort_keys=True)
#not isCircular(<structure,1>) -> <jsonstring> := simplejson.dumps(<structure>, ensure_ascii=False)
#not isCircular(<structure,1>) -> <jsonstring> := simplejson.dumps(<structure>, check_circular=False)
#not isCircular(<structure,1>) -> <jsonstring> := simplejson.dumps(<structure>, use_decimal=False)
#not isCircular(<structure,1>) -> <jsonstring> := simplejson.dumps(<structure>, tuple_as_array=False)
#not isCircular(<structure,1>) -> <jsonstring> := simplejson.dumps(<structure>, iterable_as_array=True)

# The above is nice and easy to read, but doesn't combine optional arguments, so...
# we replace it with the Lovecraftian nightmare below, which does all possible combinations
# using nondeterministic choice trickery

not isCircular(<structure,1>) -> <jsonstring> := simplejson.dumps(<structure><,[,sort_keys=True,,],><,[,ensure_ascii=False,,],><,[,check_circular=False,,],><,[,ignore_nan=True,,],><,[,use_decimal=False,,],><,[,tuple_as_array=False,,],><,[,iterable_as_array=False,,],><,[,indent=<istring>,,,indent=<ilevel>,,],>)

{ValueError} not isCircular(<structure,1>) -> <jsonstring> := simplejson.dumps(<structure>,allow_nan=False<,[,sort_keys=True,,],><,[,ensure_ascii=False,,],><,[,check_circular=False,,],><,[,ignore_nan=True,,],><,[,use_decimal=False,,],><,[,tuple_as_array=False,,],><,[,iterable_as_array=False,,],><,[,indent=<istring>,,,indent=<ilevel>,,],>)

simplejson.loads(<jsonstring>)
simplejson.loads(<jsonstring>,use_decimal=True)

# Don't check round-trip property for every possible option, but basic sanity check is a good idea
# Round trip fails for NaN because NaN != NaN, so have to recursively change all NaNs into a string representation -- AFTER loads

property: isCircular(<structure,1>) or (stringifyNans(simplejson.loads(simplejson.dumps(<structure>))) == stringifyNans(<structure,1>))
