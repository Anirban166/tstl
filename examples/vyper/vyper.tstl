@import vyhelper

<@
def statementsTooLong(s1,s2):
    return len(s1) + len(s2) > 1024

def exprTooLong(expr1,expr2):
    return len(expr1) + len(expr2) > 256
@>

pool: <size> 5

pool: <btype> 5
pool: <var> 5
pool: <lvar> 5
pool: <avar> 5
pool: <cvar> 5
pool: <func> 5

pool: <stvr> 5

pool: <decpart> 5
pool: <const> 5

pool: <expr> 5

pool: <decorators> 2

pool: <cdecl> 5
pool: <cdecls> 5

pool: <vardecl> 5
pool: <vardecls> 5

pool: <lvardecl> 5
pool: <lvardecls> 5

pool: <fstmt> 5
pool: <fbody> 5

pool: <bvar> 5

pool: <fret> 2

pool: <ftypes> 5
pool: <fargs> 5

pool: <funcdecl> 5
pool: <funcdecls> 5

<size> := str(<[1..10]>)

<btype> := "address"
<btype> := "bool"
<btype> := "int128"
<btype> := "int128(wei)"
<btype> := "uint256"
<btype> := "uint256(wei)"
<btype> := "decimal"
<btype> := "bytes32"

<btype> := "Bytes[" + <size> + "]"
<btype> := "String[" + <size> + "]"

<btype> := <btype> + "[" + <size> + "]"

<btype> := "HashMap[" + <btype> + ", " + <btype> + "]"

<var> := "v" + str(<[0..9]>)
<lvar> := "lv" + str(<[0..9]>)
<avar> := "av" + str(<[0..9]>)
<cvar> := "cv" + str(<[0..9]>)

<func> := "f" + str(<[0..9]>)
<func> := "__default__"
<func> := "__init__"

<vardecl> := vyhelper.declareVar(<var> + ": " + <btype> + chr(10))
<vardecl> := vyhelper.declareVar(<var> + ": public(" + <btype> + ")" + chr(10))
<vardecl> := vyhelper.declareVar(<var> + ": private(" + <btype> + ")" + chr(10))

<cdecl> := vyhelper.declareVar(<cvar> + ": constant(" + <btype> + ") = " + <expr> + chr(10))

vyhelper.declared(<var,1>) -> <bvar> := "self." + <var>
vyhelper.declared(<cvar,1>) -> <bvar> := <cvar>
vyhelper.declared(<lvar,1>) -> <bvar> := <lvar>
vyhelper.declared(<avar,1>) -> <bvar> := <avar>

<decpart> := str(<[0..9]>)
<decpart> += str(<[0..9]>)

<const> := str(<[-10..10]>) + "." + <decpart>
<const> := str(<[-10..10]>)
<const> := "ZERO_ADDRESS"
<const> := "MAX_INT128"
<const> := "MIN_INT128"
<const> := "MAX_DECIMAL"
<const> := "MIN_DECIMAL"
<const> := "MAX_UINT256"
<const> := "ZERO_WEI"

<decorators> := ""
<decorators> := "@constant" + chr(10)
<decorators> := "@nonreentrant(" + chr(34) + "k" + str(<[0..3]>) + chr(34) + ")" + chr(10)
<decorators> := "@nonreentrant(" + chr(34) + "k" + str(<[0..3]>) + chr(34) + ")" + chr(10) + "@constant" + chr(10)

<ftypes> := ""
<ftypes> := vyhelper.declareVar(<avar> + ": " + <btype>)

<fargs> := ""
<fargs> := <expr>

<stvr> := <["", "alpha", "beta", "gamma"]>

<expr> := '"' + <stvr> + '"'
<expr> := <bvar>
<expr> := "(" + <expr> + ")"
<expr> := "not " + <expr>
<expr> := "-" + <expr>
not exprTooLong(<expr,2>,<expr,3>) -> <expr> := <expr> + " + " + <expr>
not exprTooLong(<expr,2>,<expr,3>) -> <expr> := <expr> + " - " + <expr>
not exprTooLong(<expr,2>,<expr,3>) -> <expr> := <expr> + " * " + <expr>
not exprTooLong(<expr,2>,<expr,3>) -> <expr> := <expr> + " / " + <expr>
#not exprTooLong(<expr,2>,<expr,3>) -> <expr> := <expr> + " ** " + <expr> # avoid folding blowups
not exprTooLong(<expr,2>,<expr,3>) -> <expr> := <expr> + " % " + <expr>
not exprTooLong(<expr,2>,<expr,3>) -> <expr> := "min(" + <expr> + ", " + <expr> + ")"
not exprTooLong(<expr,2>,<expr,3>) -> <expr> := "max(" + <expr> + ", " + <expr> + ")"
not exprTooLong(<expr,2>,<expr,3>) -> <expr> := "bitwise_and(" + <expr> + ", " + <expr> + ")"
not exprTooLong(<expr,2>,<expr,3>) -> <expr> := "bitwise_or(" + <expr> + ", " + <expr> + ")"
not exprTooLong(<expr,2>,<expr,3>) -> <expr> := "bitwise_xor(" + <expr> + ", " + <expr> + ")"
not exprTooLong(<expr,2>,<expr,3>) -> <expr> := <expr> + " == " + <expr>
not exprTooLong(<expr,2>,<expr,3>) -> <expr> := <expr> + " != " + <expr>
not exprTooLong(<expr,2>,<expr,3>) -> <expr> := <expr> + " and " + <expr>
not exprTooLong(<expr,2>,<expr,3>) -> <expr> := <expr> + " or " + <expr>
not exprTooLong(<expr,2>,<expr,3>) -> <expr> := <expr> + " < " + <expr>
not exprTooLong(<expr,2>,<expr,3>) -> <expr> := <expr> + " <= " + <expr>
not exprTooLong(<expr,2>,<expr,3>) -> <expr> := <expr> + " > " + <expr>
not exprTooLong(<expr,2>,<expr,3>) -> <expr> := <expr> + " >= " + <expr>
<expr> := <const>

<expr> := "block.coinbase"
<expr> := "block.difficulty"
<expr> := "block.number"
<expr> := "block.prevhash"
<expr> := "block.timestamp"
<expr> := "msg.gas"
<expr> := "msg.sender"
<expr> := "msg.value"
<expr> := "tx.origin"

<expr> := "floor(" + <expr> + ")"
<expr> := "ceil(" + <expr> + ")"
<expr> := "keccak256(" + <expr> + ")"
<expr> := "sha256(" + <expr> + ")"
<expr> := <func> + "(" + <fargs> + ")"
<expr> := <expr> + ".balance"
<expr> := <expr> + ".codesize"
<expr> := <expr> + ".is_contract"
<expr> := "convert(" + <expr> + ", " + <btype> + ")"
<expr> := <expr> + "[" + str(<[0..12]>) + "]"

<fstmt> := "    assert " + <expr> + chr(10)
<fstmt> := "    assert_modifiable " + <expr> + chr(10)
<fstmt> := "    return " + <expr> + chr(10)
<fstmt> := "    " + <bvar> + " = " + <expr> + chr(10)
<fstmt> := "    selfdestruct(" + <expr> + ")" + chr(10)
<fstmt> := "    raise(" + chr(34) + str(<[0..3]>) + chr(34) +")" + chr(10)
<fstmt> := "    clear(" + <bvar> + ")" + chr(10)
not exprTooLong(<expr,1>,<expr,2>) -> <fstmt> := "    send(" + <expr> + ", " + <expr> + ")" + chr(10)
<fstmt> := "    if " + <expr> + ":" + chr(10) + vyhelper.indent4(<fbody>)
<fstmt> := "    if " + <expr> + ":" + chr(10) + vyhelper.indent4(<fbody>) + "    else:" + chr(10) + vyhelper.indent4(<fbody>)
<fstmt> := "    if " + <expr> + ":" + chr(10) + vyhelper.indent4(<fbody>) + "    elif " + <expr> + ":" + chr(10) + vyhelper.indent4(<fbody>)
<fstmt> := "    if " + <expr> + ":" + chr(10) + vyhelper.indent4(<fbody>) + "    elif " + <expr> + ":" + chr(10) + vyhelper.indent4(<fbody>) + "    else:" + chr(10) + vyhelper.indent4(<fbody>)
<fstmt> := "    for " + <var> + " in range(" + <expr> + "):" + chr(10) + vyhelper.indent4(<fbody>)
<fstmt> := "    break" + chr(10)
<fstmt> := "    continue" + chr(10)
<fstmt> := "    pass" + chr(10)

<fbody> := <fstmt>
<fbody> := <fbody> + <fstmt>

<fret> := ""
<fret> := " -" + "> " + <btype>

<funcdecl> := <["@public" + chr(10), "@public" + chr(10) + "@payable" + chr(10), "@private" + chr(10)]> + <decorators> + "def " + <func> + "(" + <ftypes> + ")" + <fret> +":" + chr(10) + <lvardecls> + <fbody>

<vardecls> := ""
<vardecls> := <vardecl>
vyhelper.vid(<vardecl,1>) not in <vardecls,2> -> <vardecls> := <vardecls> + <vardecl>

<cdecls> := "" #ESSENTIAL
<cdecls> := <cdecl> #ESSENTIAL
vyhelper.vid(<cdecl,1>) not in <cdecls,2> -> <cdecls> := <cdecls> + <cdecl>

<lvardecl> := "    " + vyhelper.declareVar(<lvar> + ": " + <btype> + " = " + <expr> + chr(10))

<lvardecls> := "" #ESSENTIAL
<lvardecls> := <lvardecl> #ESSENTIAL
vyhelper.vid(<lvardecl,1>) not in <lvardecls,2> -> <lvardecls> := <lvardecls> + <lvardecl>

<funcdecls> := <funcdecl> #ESSENTIAL
vyhelper.fid(<funcdecl,1>) not in <funcdecls,2> -> <funcdecls> := <funcdecls> + <funcdecl>

property: vyhelper.run(<cdecls> + <vardecls> + <funcdecls>)
property: vyhelper.run(<vardecls> + <funcdecls>)
property: vyhelper.run(<cdecls> + <funcdecls>)
property: vyhelper.run(<funcdecls>)
property: vyhelper.run(<cdecls>)
property: vyhelper.run(<vardecls>)
property: vyhelper.run(<cdecls> + <vardecls>)
