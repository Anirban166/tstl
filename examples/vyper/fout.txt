RUNNING TEST failure.17521.0.test
RUNNING:
@public
@nonreentrant("k0")
def f0(av9: decimal):
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("3")

================================================================================
COMPILING:
@public
@nonreentrant("k0")
def f0(av9: decimal):
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("3")

RAISED: Exception('Clamp always fails')
================================================================================
TEST failure.17521.0.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x16640a5f0>)
1.384713888168335 ELAPSED
STATEMENTS: 1824 BRANCHES: 2296
NEW STATEMENTS: 1824 BRANCHES: 2296
RUNNING TEST failure.17521.full.test
RUNNING:
v0: decimal

RUNNING:

RUNNING:
v0: public(decimal)

RUNNING:
cv8: constant(bool) = keccak256((MAX_DECIMAL + MAX_DECIMAL % MAX_DECIMAL + MAX_DECIMAL or MAX_DECIMAL + MAX_DECIMAL % MAX_DECIMAL + MAX_DECIMAL)) * (MAX_DECIMAL + MAX_DECIMAL % MAX_DECIMAL + MAX_DECIMAL or MAX_DECIMAL + MAX_DECIMAL % MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
cv8: constant(bool) = keccak256((MAX_DECIMAL + MAX_DECIMAL % MAX_DECIMAL + MAX_DECIMAL or MAX_DECIMAL + MAX_DECIMAL % MAX_DECIMAL + MAX_DECIMAL)) * (MAX_DECIMAL + MAX_DECIMAL % MAX_DECIMAL + MAX_DECIMAL or MAX_DECIMAL + MAX_DECIMAL % MAX_DECIMAL + MAX_DECIMAL)
v0: decimal

RUNNING:
cv8: constant(bool) = keccak256((MAX_DECIMAL + MAX_DECIMAL % MAX_DECIMAL + MAX_DECIMAL or MAX_DECIMAL + MAX_DECIMAL % MAX_DECIMAL + MAX_DECIMAL)) * (MAX_DECIMAL + MAX_DECIMAL % MAX_DECIMAL + MAX_DECIMAL or MAX_DECIMAL + MAX_DECIMAL % MAX_DECIMAL + MAX_DECIMAL)
v0: public(decimal)

RUNNING:
v0: decimal
@public
@nonreentrant("k0")
def f0(av9: decimal):
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("3")

================================================================================
COMPILING:
v0: decimal
@public
@nonreentrant("k0")
def f0(av9: decimal):
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("3")

RAISED: Exception('Clamp always fails')
================================================================================
TEST failure.17521.full.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x166521a00>)
1.7057850360870361 ELAPSED
STATEMENTS: 2319 BRANCHES: 2937
NEW STATEMENTS: 495 BRANCHES: 641
RUNNING TEST failure.17521.reduced.test
RUNNING:
@public
@nonreentrant("k0")
def f0(av9: decimal):
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("3")

================================================================================
COMPILING:
@public
@nonreentrant("k0")
def f0(av9: decimal):
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("3")

RAISED: Exception('Clamp always fails')
================================================================================
TEST failure.17521.reduced.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x166517050>)
1.7290089130401611 ELAPSED
STATEMENTS: 2319 BRANCHES: 2937
RUNNING TEST failure.2122.0.test
RUNNING:
cv0: constant(uint256) = bitwise_or(block.timestamp, MAX_INT128)

RUNNING:
cv0: constant(uint256) = bitwise_or(block.timestamp, MAX_INT128)
@private
@nonreentrant("k0")
def f0(av0: uint256) -> uint256:
    lv0: uint256 = MAX_INT128
    return MAX_INT128

RUNNING:
@private
@nonreentrant("k0")
def f0(av0: uint256) -> uint256:
    lv0: uint256 = MAX_INT128
    return MAX_INT128

RUNNING:
cv0: constant(uint256) = bitwise_or(block.timestamp, MAX_INT128)
cv1: constant(uint256) = convert(cv0, uint256)
@private
@nonreentrant("k0")
def f0(av0: uint256) -> uint256:
    lv0: uint256 = MAX_INT128
    return MAX_INT128

================================================================================
COMPILING:
cv0: constant(uint256) = bitwise_or(block.timestamp, MAX_INT128)
cv1: constant(uint256) = convert(cv0, uint256)
@private
@nonreentrant("k0")
def f0(av0: uint256) -> uint256:
    lv0: uint256 = MAX_INT128
    return MAX_INT128

RAISED: AttributeError("'str' object has no attribute 'fornat'")
================================================================================
TEST failure.2122.0.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x16653cb40>)
1.8523869514465332 ELAPSED
STATEMENTS: 2489 BRANCHES: 3169
NEW STATEMENTS: 170 BRANCHES: 232
RUNNING TEST failure.2122.full.test
RUNNING:
v0: public(uint256)

RUNNING:
cv0: constant(uint256) = bitwise_or(block.timestamp, MAX_INT128)

RUNNING:
cv0: constant(uint256) = bitwise_or(block.timestamp, MAX_INT128)
v0: public(uint256)

RUNNING:
cv0: constant(uint256) = bitwise_or(block.timestamp, MAX_INT128)
v0: public(uint256)
@private
@nonreentrant("k0")
def f0(av0: uint256) -> uint256:
    lv0: uint256 = MAX_INT128
    return MAX_INT128

RUNNING:
v0: public(uint256)
@private
@nonreentrant("k0")
def f0(av0: uint256) -> uint256:
    lv0: uint256 = MAX_INT128
    return MAX_INT128

RUNNING:
cv0: constant(uint256) = bitwise_or(block.timestamp, MAX_INT128)
@private
@nonreentrant("k0")
def f0(av0: uint256) -> uint256:
    lv0: uint256 = MAX_INT128
    return MAX_INT128

RUNNING:
@private
@nonreentrant("k0")
def f0(av0: uint256) -> uint256:
    lv0: uint256 = MAX_INT128
    return MAX_INT128

RUNNING:
cv0: constant(uint256) = bitwise_or(block.timestamp, MAX_INT128)
v0: private(timedelta)
@private
@nonreentrant("k0")
def f0(av0: uint256) -> uint256:
    lv0: uint256 = MAX_INT128
    return MAX_INT128

RUNNING:
v0: private(timedelta)
@private
@nonreentrant("k0")
def f0(av0: uint256) -> uint256:
    lv0: uint256 = MAX_INT128
    return MAX_INT128

RUNNING:
v0: private(timedelta)

RUNNING:
cv0: constant(uint256) = bitwise_or(block.timestamp, MAX_INT128)
v0: private(timedelta)

RUNNING:
cv0: constant(uint256) = bitwise_or(block.timestamp, MAX_INT128)
cv1: constant(timedelta) = bitwise_or(bitwise_xor(convert(cv0, uint256), cv0 < convert(cv0, uint256)).codesize, cv0)
v0: public(uint256)
@private
@nonreentrant("k0")
def f0(av0: uint256) -> uint256:
    lv0: uint256 = MAX_INT128
    return MAX_INT128

================================================================================
COMPILING:
cv0: constant(uint256) = bitwise_or(block.timestamp, MAX_INT128)
cv1: constant(timedelta) = bitwise_or(bitwise_xor(convert(cv0, uint256), cv0 < convert(cv0, uint256)).codesize, cv0)
v0: public(uint256)
@private
@nonreentrant("k0")
def f0(av0: uint256) -> uint256:
    lv0: uint256 = MAX_INT128
    return MAX_INT128

RAISED: AttributeError("'str' object has no attribute 'fornat'")
================================================================================
TEST failure.2122.full.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x166577140>)
2.398662805557251 ELAPSED
STATEMENTS: 2492 BRANCHES: 3177
NEW STATEMENTS: 3 BRANCHES: 8
RUNNING TEST failure.2122.reduced.test
RUNNING:
cv0: constant(uint256) = bitwise_or(block.timestamp, MAX_INT128)

RUNNING:
cv0: constant(uint256) = bitwise_or(block.timestamp, MAX_INT128)
@private
@nonreentrant("k0")
def f0(av0: uint256) -> uint256:
    lv0: uint256 = MAX_INT128
    return MAX_INT128

RUNNING:
@private
@nonreentrant("k0")
def f0(av0: uint256) -> uint256:
    lv0: uint256 = MAX_INT128
    return MAX_INT128

RUNNING:
cv0: constant(uint256) = bitwise_or(block.timestamp, MAX_INT128)
cv1: constant(uint256) = convert(cv0, uint256)
@private
@nonreentrant("k0")
def f0(av0: uint256) -> uint256:
    lv0: uint256 = MAX_INT128
    return MAX_INT128

================================================================================
COMPILING:
cv0: constant(uint256) = bitwise_or(block.timestamp, MAX_INT128)
cv1: constant(uint256) = convert(cv0, uint256)
@private
@nonreentrant("k0")
def f0(av0: uint256) -> uint256:
    lv0: uint256 = MAX_INT128
    return MAX_INT128

RAISED: AttributeError("'str' object has no attribute 'fornat'")
================================================================================
TEST failure.2122.reduced.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x1664b2280>)
2.5148098468780518 ELAPSED
STATEMENTS: 2492 BRANCHES: 3177
RUNNING TEST failure.25492.0.test
RUNNING:
@private
@nonreentrant("k0")
def f3():
    for v9 in range(-1):
        break
    

================================================================================
COMPILING:
@private
@nonreentrant("k0")
def f3():
    for v9 in range(-1):
        break
    

RAISED: CompilerPanic('Number of times repeated must be a constant nonzero positive integer: -1')
================================================================================
TEST failure.25492.0.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x1664a79b0>)
2.539773941040039 ELAPSED
STATEMENTS: 2570 BRANCHES: 3278
NEW STATEMENTS: 78 BRANCHES: 101
RUNNING TEST failure.25492.full.test
RUNNING:

RUNNING:
@public
@nonreentrant("k0")
def __default__():
    break

RUNNING:
cv1: constant(decimal) = MAX_DECIMAL
@public
@nonreentrant("k0")
def __default__():
    break

RUNNING:
cv1: constant(decimal) = MAX_DECIMAL

RUNNING:
cv3: constant(decimal) = MAX_DECIMAL / sha256(bitwise_xor(bitwise_and(block.timestamp, block.timestamp) == bitwise_and(block.timestamp, block.timestamp), bitwise_and(block.timestamp, block.timestamp) == bitwise_and(block.timestamp, block.timestamp)) / -6).codesize
@public
@nonreentrant("k0")
def __default__():
    break

RUNNING:
cv3: constant(decimal) = MAX_DECIMAL / sha256(bitwise_xor(bitwise_and(block.timestamp, block.timestamp) == bitwise_and(block.timestamp, block.timestamp), bitwise_and(block.timestamp, block.timestamp) == bitwise_and(block.timestamp, block.timestamp)) / -6).codesize

RUNNING:
cv3: constant(decimal) = MAX_DECIMAL / sha256(bitwise_xor(bitwise_and(block.timestamp, block.timestamp) == bitwise_and(block.timestamp, block.timestamp), bitwise_and(block.timestamp, block.timestamp) == bitwise_and(block.timestamp, block.timestamp)) / -6).codesize
cv1: constant(decimal) = MAX_DECIMAL
@public
@nonreentrant("k0")
def __default__():
    break

RUNNING:
cv3: constant(decimal) = MAX_DECIMAL / sha256(bitwise_xor(bitwise_and(block.timestamp, block.timestamp) == bitwise_and(block.timestamp, block.timestamp), bitwise_and(block.timestamp, block.timestamp) == bitwise_and(block.timestamp, block.timestamp)) / -6).codesize
cv1: constant(decimal) = MAX_DECIMAL

RUNNING:
v5: public(decimal)
@public
@nonreentrant("k0")
def __default__():
    break

RUNNING:
cv1: constant(decimal) = MAX_DECIMAL
v5: public(decimal)
@public
@nonreentrant("k0")
def __default__():
    break

RUNNING:
cv3: constant(decimal) = MAX_DECIMAL / sha256(bitwise_xor(bitwise_and(block.timestamp, block.timestamp) == bitwise_and(block.timestamp, block.timestamp), bitwise_and(block.timestamp, block.timestamp) == bitwise_and(block.timestamp, block.timestamp)) / -6).codesize
v5: public(decimal)
@public
@nonreentrant("k0")
def __default__():
    break

RUNNING:
cv3: constant(decimal) = MAX_DECIMAL / sha256(bitwise_xor(bitwise_and(block.timestamp, block.timestamp) == bitwise_and(block.timestamp, block.timestamp), bitwise_and(block.timestamp, block.timestamp) == bitwise_and(block.timestamp, block.timestamp)) / -6).codesize
cv1: constant(decimal) = MAX_DECIMAL
v5: public(decimal)
@public
@nonreentrant("k0")
def __default__():
    break

RUNNING:
v5: public(decimal)

RUNNING:
cv1: constant(decimal) = MAX_DECIMAL
v5: public(decimal)

RUNNING:
cv3: constant(decimal) = MAX_DECIMAL / sha256(bitwise_xor(bitwise_and(block.timestamp, block.timestamp) == bitwise_and(block.timestamp, block.timestamp), bitwise_and(block.timestamp, block.timestamp) == bitwise_and(block.timestamp, block.timestamp)) / -6).codesize
v5: public(decimal)

RUNNING:
cv3: constant(decimal) = MAX_DECIMAL / sha256(bitwise_xor(bitwise_and(block.timestamp, block.timestamp) == bitwise_and(block.timestamp, block.timestamp), bitwise_and(block.timestamp, block.timestamp) == bitwise_and(block.timestamp, block.timestamp)) / -6).codesize
cv1: constant(decimal) = MAX_DECIMAL
v5: public(decimal)

RUNNING:
@private
@nonreentrant("k0")
def f3():
    for v9 in range(-1):
        break
    

================================================================================
COMPILING:
@private
@nonreentrant("k0")
def f3():
    for v9 in range(-1):
        break
    

RAISED: CompilerPanic('Number of times repeated must be a constant nonzero positive integer: -1')
================================================================================
TEST failure.25492.full.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x16658a0a0>)
3.24190092086792 ELAPSED
STATEMENTS: 2614 BRANCHES: 3337
NEW STATEMENTS: 44 BRANCHES: 59
RUNNING TEST failure.25492.reduced.test
RUNNING:
@private
@nonreentrant("k0")
def f3():
    for v9 in range(-1):
        break
    

================================================================================
COMPILING:
@private
@nonreentrant("k0")
def f3():
    for v9 in range(-1):
        break
    

RAISED: CompilerPanic('Number of times repeated must be a constant nonzero positive integer: -1')
================================================================================
TEST failure.25492.reduced.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x1664e9a00>)
3.2622649669647217 ELAPSED
STATEMENTS: 2614 BRANCHES: 3337
RUNNING TEST failure.35615.0.test
RUNNING:
@public
@payable
@nonreentrant("k0")
def f2(av1: decimal):
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("3")

================================================================================
COMPILING:
@public
@payable
@nonreentrant("k0")
def f2(av1: decimal):
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("3")

RAISED: Exception('Clamp always fails')
================================================================================
TEST failure.35615.0.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x1664db640>)
3.287881851196289 ELAPSED
STATEMENTS: 2615 BRANCHES: 3340
NEW STATEMENTS: 1 BRANCHES: 3
RUNNING TEST failure.35615.1.test
RUNNING:
@public
@nonreentrant("k0")
def __default__():
    for v5 in range(ZERO_WEI):
        selfdestruct(block.coinbase)
    
    if ZERO_WEI.balance:
        for v5 in range(ZERO_WEI):
            selfdestruct(block.coinbase)
        
    
    elif ceil(ZERO_WEI):
        for v5 in range(ZERO_WEI):
            selfdestruct(block.coinbase)
        
    
    else:
        selfdestruct(block.coinbase)
    

================================================================================
COMPILING:
@public
@nonreentrant("k0")
def __default__():
    for v5 in range(ZERO_WEI):
        selfdestruct(block.coinbase)
    
    if ZERO_WEI.balance:
        for v5 in range(ZERO_WEI):
            selfdestruct(block.coinbase)
        
    
    elif ceil(ZERO_WEI):
        for v5 in range(ZERO_WEI):
            selfdestruct(block.coinbase)
        
    
    else:
        selfdestruct(block.coinbase)
    

RAISED: CompilerPanic('Number of times repeated must be a constant nonzero positive integer: 0')
================================================================================
TEST failure.35615.1.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x1664d2d70>)
3.3252227306365967 ELAPSED
STATEMENTS: 2637 BRANCHES: 3375
NEW STATEMENTS: 22 BRANCHES: 35
RUNNING TEST failure.35615.2.test
RUNNING:
@public
@nonreentrant("k0")
def f2():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    pass

================================================================================
COMPILING:
@public
@nonreentrant("k0")
def f2():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    pass

RAISED: Exception('Clamp always fails')
================================================================================
TEST failure.35615.2.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x166508230>)
3.351752996444702 ELAPSED
STATEMENTS: 2638 BRANCHES: 3377
NEW STATEMENTS: 1 BRANCHES: 2
RUNNING TEST failure.35615.full.test
RUNNING:
v0: decimal

RUNNING:

RUNNING:
v0: decimal
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
v0: decimal
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
v0: decimal

RUNNING:
v0: public(int128)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
v0: public(int128)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
v0: public(int128)

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
v0: public(int128)

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
v0: decimal
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
v0: public(int128)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
v0: decimal

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
v0: public(int128)

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
v0: decimal
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
v0: public(int128)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
v0: decimal

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
v0: public(int128)

RUNNING:
v0: public(uint256)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
v0: public(uint256)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
v0: public(uint256)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
v0: public(uint256)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
v0: public(uint256)

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
v0: public(uint256)

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
v0: public(uint256)

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
v0: public(uint256)

RUNNING:
v0: decimal
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
v0: public(uint256)
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
v0: public(int128)
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
v0: decimal
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
v0: public(uint256)
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
v0: public(int128)
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
v0: decimal
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
v0: public(uint256)
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
v0: public(int128)
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
v0: decimal
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
v0: public(uint256)
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
v0: public(int128)
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
v0: decimal
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
v0: public(uint256)
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
v0: public(int128)
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
v0: decimal
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
v0: public(uint256)
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
v0: public(int128)
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
v0: decimal
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
v0: public(uint256)
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
v0: public(int128)
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
v0: decimal
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
v0: public(uint256)
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
v0: public(int128)
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
v0: decimal
v7: timedelta
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
v0: decimal
v7: timedelta
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
v0: decimal
v7: timedelta
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
v0: decimal
v7: timedelta
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
v0: decimal
v7: timedelta
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
v0: decimal
v7: timedelta
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
v0: decimal
v7: timedelta
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
v0: decimal
v7: timedelta
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
v0: decimal
v7: timedelta
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
v0: decimal
v7: timedelta
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
v0: decimal
v7: timedelta
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
v0: decimal
v7: timedelta
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
v0: decimal
v7: timedelta

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
v0: decimal
v7: timedelta

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
v0: decimal
v7: timedelta

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
v0: decimal
v7: timedelta

RUNNING:
v0: decimal
v6: private(wei_value)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
v0: decimal
v6: private(wei_value)
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
v0: decimal
v6: private(wei_value)
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
v0: decimal
v6: private(wei_value)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
v0: decimal
v6: private(wei_value)
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
v0: decimal
v6: private(wei_value)
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
v0: decimal
v6: private(wei_value)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
v0: decimal
v6: private(wei_value)
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
v0: decimal
v6: private(wei_value)
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
v0: decimal
v6: private(wei_value)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
v0: decimal
v6: private(wei_value)
@public
def f4(av9: bool):
    lv2: wei_value = MAX_DECIMAL * MAX_DECIMAL
    if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    else:
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
        assert MAX_DECIMAL + MAX_DECIMAL
        if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if convert(-f1(bitwise_and(bitwise_or(-3, -3), -3) != f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract)), bool):
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
    
    elif block.coinbase:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    else:
        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance, address):
            pass
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            if sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif keccak256(sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance)):
                pass
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif convert(not sha256(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty.balance), address) + bitwise_and(bitwise_or(-3, -3), -3):
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        else:
            send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
        
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    assert MAX_DECIMAL + MAX_DECIMAL
                    if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
            else:
                if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                    if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                    
                    elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
                else:
                    pass
                    if MAX_DECIMAL * MAX_DECIMAL:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                    else:
                        assert MAX_DECIMAL + MAX_DECIMAL
                    
                
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
    
    if floor(msg.value):
        pass
        if MAX_DECIMAL * MAX_DECIMAL:
            assert MAX_DECIMAL + MAX_DECIMAL
        
        elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
            assert MAX_DECIMAL + MAX_DECIMAL
        
        else:
            assert MAX_DECIMAL + MAX_DECIMAL
        
    
    elif block.timestamp + block.timestamp == block.timestamp - block.timestamp + block.timestamp == block.timestamp:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    
    else:
        if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
            if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        else:
            pass
            if MAX_DECIMAL * MAX_DECIMAL:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
        
        if (floor(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract))):
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract).is_contract:
            assert MAX_DECIMAL + MAX_DECIMAL
            if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
            
            elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                assert MAX_DECIMAL + MAX_DECIMAL
            
            else:
                assert MAX_DECIMAL + MAX_DECIMAL
            
            if sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                assert MAX_DECIMAL + MAX_DECIMAL
                if not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty:
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif sha256(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3).codesize):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
        else:
            if f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty) * -3 / bitwise_and(bitwise_or(-3, -3), -3) * bitwise_and(bitwise_or(-3, -3), -3):
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            elif convert(f4(MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract) - self.v0, int128):
                if MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)
                
                elif MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
            else:
                pass
                if MAX_DECIMAL * MAX_DECIMAL:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                elif MAX_DECIMAL * MAX_DECIMAL / (not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance):
                    assert MAX_DECIMAL + MAX_DECIMAL
                
                else:
                    assert MAX_DECIMAL + MAX_DECIMAL
                
            
        
    

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
v0: decimal
v6: private(wei_value)
@public
@payable
@nonreentrant("k2")
def f4():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    send(MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL != MAX_DECIMAL + MAX_DECIMAL)

RUNNING:
v0: decimal
v6: private(wei_value)

RUNNING:
cv2: constant(wei_value) = MAX_DECIMAL * MAX_DECIMAL > convert(bitwise_xor(MAX_DECIMAL * MAX_DECIMAL, bitwise_xor(block.difficulty, block.difficulty)), decimal).is_contract
v0: decimal
v6: private(wei_value)

RUNNING:
cv1: constant(int128) = floor(f4(not bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) or bitwise_or(MAX_DECIMAL + MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL).balance <= block.difficulty))
v0: decimal
v6: private(wei_value)

RUNNING:
cv2: constant(address) = bitwise_and(bitwise_or(-3, -3), -3)
v0: decimal
v6: private(wei_value)

RUNNING:
v0: decimal
@public
@nonreentrant("k0")
def f2():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    pass

================================================================================
COMPILING:
v0: decimal
@public
@nonreentrant("k0")
def f2():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    pass

RAISED: Exception('Clamp always fails')
================================================================================
TEST failure.35615.full.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x1665bd320>)
64.85029292106628 ELAPSED
STATEMENTS: 2685 BRANCHES: 3446
NEW STATEMENTS: 47 BRANCHES: 69
RUNNING TEST failure.35615.reduced.test
RUNNING:
@public
@nonreentrant("k0")
def f2():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    pass

================================================================================
COMPILING:
@public
@nonreentrant("k0")
def f2():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    pass

RAISED: Exception('Clamp always fails')
================================================================================
TEST failure.35615.reduced.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x1664c9dc0>)
64.87665581703186 ELAPSED
STATEMENTS: 2685 BRANCHES: 3446
RUNNING TEST failure.41523.0.test
RUNNING:
@public
@nonreentrant("k0")
def f1(av0: timestamp):
    pass
    for v8 in range(ZERO_WEI):
        continue
    

================================================================================
COMPILING:
@public
@nonreentrant("k0")
def f1(av0: timestamp):
    pass
    for v8 in range(ZERO_WEI):
        continue
    

RAISED: CompilerPanic('Number of times repeated must be a constant nonzero positive integer: 0')
================================================================================
TEST failure.41523.0.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x166481230>)
64.90681791305542 ELAPSED
STATEMENTS: 2686 BRANCHES: 3448
NEW STATEMENTS: 1 BRANCHES: 2
RUNNING TEST failure.41523.1.test
RUNNING:
@private
@nonreentrant("k0")
def f0():
    assert MAX_DECIMAL + MAX_DECIMAL >= MAX_DECIMAL + MAX_DECIMAL

================================================================================
COMPILING:
@private
@nonreentrant("k0")
def f0():
    assert MAX_DECIMAL + MAX_DECIMAL >= MAX_DECIMAL + MAX_DECIMAL

RAISED: Exception('Clamp always fails')
================================================================================
TEST failure.41523.1.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x166572d20>)
64.93182277679443 ELAPSED
STATEMENTS: 2691 BRANCHES: 3457
NEW STATEMENTS: 5 BRANCHES: 9
RUNNING TEST failure.41523.2.test
RUNNING:
@public
@payable
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("1")

================================================================================
COMPILING:
@public
@payable
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("1")

RAISED: Exception('Clamp always fails')
================================================================================
TEST failure.41523.2.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x166518190>)
64.95914387702942 ELAPSED
STATEMENTS: 2691 BRANCHES: 3457
RUNNING TEST failure.41523.3.test
RUNNING:
@public
@payable
@nonreentrant("k0")
def f5():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("0")

================================================================================
COMPILING:
@public
@payable
@nonreentrant("k0")
def f5():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("0")

RAISED: Exception('Clamp always fails')
================================================================================
TEST failure.41523.3.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x1665407d0>)
64.98625683784485 ELAPSED
STATEMENTS: 2691 BRANCHES: 3457
RUNNING TEST failure.41523.4.test
RUNNING:
@private
@nonreentrant("k0")
def f1():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("2")

================================================================================
COMPILING:
@private
@nonreentrant("k0")
def f1():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("2")

RAISED: Exception('Clamp always fails')
================================================================================
TEST failure.41523.4.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x16650eaf0>)
65.01239705085754 ELAPSED
STATEMENTS: 2691 BRANCHES: 3457
RUNNING TEST failure.41523.full.test
RUNNING:
v0: decimal

RUNNING:

RUNNING:
v0: decimal
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
v0: decimal
@public
@payable
@nonreentrant("k0")
def f1():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
@public
@payable
@nonreentrant("k0")
def f1():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
v0: decimal
@private
@nonreentrant("k0")
def f1():
    assert MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
@private
@nonreentrant("k0")
def f1():
    assert MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv9: constant(decimal) = ceil(ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL or block.coinbase > keccak256(block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL) - block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL)
v0: decimal
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv9: constant(decimal) = ceil(ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL or block.coinbase > keccak256(block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL) - block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL)
v0: decimal
@public
@payable
@nonreentrant("k0")
def f1():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv9: constant(decimal) = ceil(ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL or block.coinbase > keccak256(block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL) - block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL)
v0: decimal
@private
@nonreentrant("k0")
def f1():
    assert MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv9: constant(decimal) = ceil(ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL or block.coinbase > keccak256(block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL) - block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv9: constant(decimal) = ceil(ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL or block.coinbase > keccak256(block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL) - block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL)
@public
@payable
@nonreentrant("k0")
def f1():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv9: constant(decimal) = ceil(ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL or block.coinbase > keccak256(block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL) - block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL)
@private
@nonreentrant("k0")
def f1():
    assert MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv9: constant(decimal) = ceil(ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL or block.coinbase > keccak256(block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL) - block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL)

RUNNING:
cv9: constant(decimal) = ceil(ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL or block.coinbase > keccak256(block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL) - block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL)
v0: decimal

RUNNING:
v0: decimal
v6: private(decimal)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
v0: decimal
v6: private(decimal)
@public
@payable
@nonreentrant("k0")
def f1():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
v0: decimal
v6: private(decimal)
@private
@nonreentrant("k0")
def f1():
    assert MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv9: constant(decimal) = ceil(ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL or block.coinbase > keccak256(block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL) - block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL)
v0: decimal
v6: private(decimal)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv9: constant(decimal) = ceil(ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL or block.coinbase > keccak256(block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL) - block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL)
v0: decimal
v6: private(decimal)
@public
@payable
@nonreentrant("k0")
def f1():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv9: constant(decimal) = ceil(ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL or block.coinbase > keccak256(block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL) - block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL)
v0: decimal
v6: private(decimal)
@private
@nonreentrant("k0")
def f1():
    assert MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
v0: decimal
v6: private(decimal)

RUNNING:
cv9: constant(decimal) = ceil(ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL or block.coinbase > keccak256(block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL) - block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL)
v0: decimal
v6: private(decimal)

RUNNING:
cv5: constant(decimal) = (convert(tx.origin * not ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL * ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL, decimal) <= not block.difficulty)
v0: decimal
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv5: constant(decimal) = (convert(tx.origin * not ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL * ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL, decimal) <= not block.difficulty)
v0: decimal
@public
@payable
@nonreentrant("k0")
def f1():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv5: constant(decimal) = (convert(tx.origin * not ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL * ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL, decimal) <= not block.difficulty)
v0: decimal
@private
@nonreentrant("k0")
def f1():
    assert MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv5: constant(decimal) = (convert(tx.origin * not ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL * ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL, decimal) <= not block.difficulty)
v0: decimal
v6: private(decimal)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv5: constant(decimal) = (convert(tx.origin * not ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL * ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL, decimal) <= not block.difficulty)
v0: decimal
v6: private(decimal)
@public
@payable
@nonreentrant("k0")
def f1():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv5: constant(decimal) = (convert(tx.origin * not ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL * ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL, decimal) <= not block.difficulty)
v0: decimal
v6: private(decimal)
@private
@nonreentrant("k0")
def f1():
    assert MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv5: constant(decimal) = (convert(tx.origin * not ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL * ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL, decimal) <= not block.difficulty)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv5: constant(decimal) = (convert(tx.origin * not ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL * ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL, decimal) <= not block.difficulty)
@public
@payable
@nonreentrant("k0")
def f1():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv5: constant(decimal) = (convert(tx.origin * not ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL * ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL, decimal) <= not block.difficulty)
@private
@nonreentrant("k0")
def f1():
    assert MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv5: constant(decimal) = (convert(tx.origin * not ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL * ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL, decimal) <= not block.difficulty)

RUNNING:
cv5: constant(decimal) = (convert(tx.origin * not ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL * ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL, decimal) <= not block.difficulty)
v0: decimal

RUNNING:
cv5: constant(decimal) = (convert(tx.origin * not ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL * ceil(MAX_DECIMAL) + MAX_DECIMAL <= block.timestamp + ceil(MAX_DECIMAL) + MAX_DECIMAL, decimal) <= not block.difficulty)
v0: decimal
v6: private(decimal)

RUNNING:
v0: decimal
@private
@nonreentrant("k0")
def f1():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("2")

================================================================================
COMPILING:
v0: decimal
@private
@nonreentrant("k0")
def f1():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("2")

RAISED: Exception('Clamp always fails')
================================================================================
TEST failure.41523.full.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x166565b90>)
65.95290184020996 ELAPSED
STATEMENTS: 2707 BRANCHES: 3484
NEW STATEMENTS: 16 BRANCHES: 27
RUNNING TEST failure.41523.reduced.test
RUNNING:
@private
@nonreentrant("k0")
def f1():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("2")

================================================================================
COMPILING:
@private
@nonreentrant("k0")
def f1():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("2")

RAISED: Exception('Clamp always fails')
================================================================================
TEST failure.41523.reduced.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x1667d4a00>)
65.98142194747925 ELAPSED
STATEMENTS: 2707 BRANCHES: 3484
RUNNING TEST failure.43989.0.test
RUNNING:
@public
def f3(av0: address):
    break

RUNNING:
@public
def f3(av0: address):
    break
@public
@payable
def f0(av0: address):
    break
    for v0 in range(-9):
        break
    

================================================================================
COMPILING:
@public
def f3(av0: address):
    break
@public
@payable
def f0(av0: address):
    break
    for v0 in range(-9):
        break
    

RAISED: CompilerPanic('Number of times repeated must be a constant nonzero positive integer: -9')
================================================================================
TEST failure.43989.0.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x1664ead70>)
66.032546043396 ELAPSED
STATEMENTS: 2720 BRANCHES: 3500
NEW STATEMENTS: 13 BRANCHES: 16
RUNNING TEST failure.43989.full.test
RUNNING:
v0: public(address)

RUNNING:

RUNNING:
v0: public(address)
v1: public(wei_value)

RUNNING:
v0: public(address)
@public
def f3(av0: address):
    break
    break

RUNNING:
v0: public(address)
v1: public(wei_value)
@public
def f3(av0: address):
    break
    break

RUNNING:
@public
def f3(av0: address):
    break
    break

RUNNING:
v0: public(address)
@private
def f0(av0: address):
    break

RUNNING:
v0: public(address)
v1: public(wei_value)
@private
def f0(av0: address):
    break

RUNNING:
@private
def f0(av0: address):
    break

RUNNING:
v0: public(address)
v1: address
@public
def f3(av0: address):
    break
    break

RUNNING:
v0: public(address)
v1: address
@private
def f0(av0: address):
    break

RUNNING:
v0: public(address)
v1: address

RUNNING:
cv8: constant(address) = bitwise_xor(max(tx.origin % tx.origin, -9 > -9 + -9 > -9) > tx.origin % tx.origin / -9 / tx.origin % tx.origin, tx.origin % tx.origin / -9 / tx.origin % tx.origin <= max(tx.origin % tx.origin, -9 > -9 + -9 > -9))
v0: public(address)
@public
def f3(av0: address):
    break
    break

RUNNING:
cv8: constant(address) = bitwise_xor(max(tx.origin % tx.origin, -9 > -9 + -9 > -9) > tx.origin % tx.origin / -9 / tx.origin % tx.origin, tx.origin % tx.origin / -9 / tx.origin % tx.origin <= max(tx.origin % tx.origin, -9 > -9 + -9 > -9))
v0: public(address)
@private
def f0(av0: address):
    break

RUNNING:
cv8: constant(address) = bitwise_xor(max(tx.origin % tx.origin, -9 > -9 + -9 > -9) > tx.origin % tx.origin / -9 / tx.origin % tx.origin, tx.origin % tx.origin / -9 / tx.origin % tx.origin <= max(tx.origin % tx.origin, -9 > -9 + -9 > -9))
v0: public(address)
v1: public(wei_value)
@public
def f3(av0: address):
    break
    break

RUNNING:
cv8: constant(address) = bitwise_xor(max(tx.origin % tx.origin, -9 > -9 + -9 > -9) > tx.origin % tx.origin / -9 / tx.origin % tx.origin, tx.origin % tx.origin / -9 / tx.origin % tx.origin <= max(tx.origin % tx.origin, -9 > -9 + -9 > -9))
v0: public(address)
v1: public(wei_value)
@private
def f0(av0: address):
    break

RUNNING:
cv8: constant(address) = bitwise_xor(max(tx.origin % tx.origin, -9 > -9 + -9 > -9) > tx.origin % tx.origin / -9 / tx.origin % tx.origin, tx.origin % tx.origin / -9 / tx.origin % tx.origin <= max(tx.origin % tx.origin, -9 > -9 + -9 > -9))
v0: public(address)
v1: address
@public
def f3(av0: address):
    break
    break

RUNNING:
cv8: constant(address) = bitwise_xor(max(tx.origin % tx.origin, -9 > -9 + -9 > -9) > tx.origin % tx.origin / -9 / tx.origin % tx.origin, tx.origin % tx.origin / -9 / tx.origin % tx.origin <= max(tx.origin % tx.origin, -9 > -9 + -9 > -9))
v0: public(address)
v1: address
@private
def f0(av0: address):
    break

RUNNING:
cv8: constant(address) = bitwise_xor(max(tx.origin % tx.origin, -9 > -9 + -9 > -9) > tx.origin % tx.origin / -9 / tx.origin % tx.origin, tx.origin % tx.origin / -9 / tx.origin % tx.origin <= max(tx.origin % tx.origin, -9 > -9 + -9 > -9))
@public
def f3(av0: address):
    break
    break

RUNNING:
cv8: constant(address) = bitwise_xor(max(tx.origin % tx.origin, -9 > -9 + -9 > -9) > tx.origin % tx.origin / -9 / tx.origin % tx.origin, tx.origin % tx.origin / -9 / tx.origin % tx.origin <= max(tx.origin % tx.origin, -9 > -9 + -9 > -9))
@private
def f0(av0: address):
    break

RUNNING:
cv8: constant(address) = bitwise_xor(max(tx.origin % tx.origin, -9 > -9 + -9 > -9) > tx.origin % tx.origin / -9 / tx.origin % tx.origin, tx.origin % tx.origin / -9 / tx.origin % tx.origin <= max(tx.origin % tx.origin, -9 > -9 + -9 > -9))

RUNNING:
cv8: constant(address) = bitwise_xor(max(tx.origin % tx.origin, -9 > -9 + -9 > -9) > tx.origin % tx.origin / -9 / tx.origin % tx.origin, tx.origin % tx.origin / -9 / tx.origin % tx.origin <= max(tx.origin % tx.origin, -9 > -9 + -9 > -9))
v0: public(address)

RUNNING:
cv8: constant(address) = bitwise_xor(max(tx.origin % tx.origin, -9 > -9 + -9 > -9) > tx.origin % tx.origin / -9 / tx.origin % tx.origin, tx.origin % tx.origin / -9 / tx.origin % tx.origin <= max(tx.origin % tx.origin, -9 > -9 + -9 > -9))
v0: public(address)
v1: public(wei_value)

RUNNING:
cv8: constant(address) = bitwise_xor(max(tx.origin % tx.origin, -9 > -9 + -9 > -9) > tx.origin % tx.origin / -9 / tx.origin % tx.origin, tx.origin % tx.origin / -9 / tx.origin % tx.origin <= max(tx.origin % tx.origin, -9 > -9 + -9 > -9))
v0: public(address)
v1: address

RUNNING:
v0: public(address)
v6: private(wei_value)
@public
def f3(av0: address):
    break
    break

RUNNING:
v0: public(address)
v6: private(wei_value)
@private
def f0(av0: address):
    break

RUNNING:
cv8: constant(address) = bitwise_xor(max(tx.origin % tx.origin, -9 > -9 + -9 > -9) > tx.origin % tx.origin / -9 / tx.origin % tx.origin, tx.origin % tx.origin / -9 / tx.origin % tx.origin <= max(tx.origin % tx.origin, -9 > -9 + -9 > -9))
v0: public(address)
v6: private(wei_value)
@public
def f3(av0: address):
    break
    break

RUNNING:
cv8: constant(address) = bitwise_xor(max(tx.origin % tx.origin, -9 > -9 + -9 > -9) > tx.origin % tx.origin / -9 / tx.origin % tx.origin, tx.origin % tx.origin / -9 / tx.origin % tx.origin <= max(tx.origin % tx.origin, -9 > -9 + -9 > -9))
v0: public(address)
v6: private(wei_value)
@private
def f0(av0: address):
    break

RUNNING:
v0: public(address)
v6: private(wei_value)

RUNNING:
cv8: constant(address) = bitwise_xor(max(tx.origin % tx.origin, -9 > -9 + -9 > -9) > tx.origin % tx.origin / -9 / tx.origin % tx.origin, tx.origin % tx.origin / -9 / tx.origin % tx.origin <= max(tx.origin % tx.origin, -9 > -9 + -9 > -9))
v0: public(address)
v6: private(wei_value)

RUNNING:
v0: public(address)
v6: private(wei_value)
@public
def f3(av0: address):
    break
    break
@public
@payable
def f0(av0: address):
    break
    for v0 in range(-9):
        break
        break
    
    if tx.origin % tx.origin:
        break
        break
    
    else:
        break
        break
    
    if -9:
        break
        for v0 in range(-9):
            break
            break
        
    
    elif -9 / tx.origin % tx.origin:
        break
    
    else:
        break
        for v0 in range(-9):
            break
            break
        
    

RUNNING:
v0: public(address)
v1: public(wei_value)
@public
def f3(av0: address):
    break
    break
@public
@payable
def f0(av0: address):
    break
    for v0 in range(-9):
        break
        break
    
    if tx.origin % tx.origin:
        break
        break
    
    else:
        break
        break
    
    if -9:
        break
        for v0 in range(-9):
            break
            break
        
    
    elif -9 / tx.origin % tx.origin:
        break
    
    else:
        break
        for v0 in range(-9):
            break
            break
        
    

RUNNING:
v0: public(address)
v1: address
@public
def f3(av0: address):
    break
    break
@public
@payable
def f0(av0: address):
    break
    for v0 in range(-9):
        break
        break
    
    if tx.origin % tx.origin:
        break
        break
    
    else:
        break
        break
    
    if -9:
        break
        for v0 in range(-9):
            break
            break
        
    
    elif -9 / tx.origin % tx.origin:
        break
    
    else:
        break
        for v0 in range(-9):
            break
            break
        
    

RUNNING:
cv8: constant(address) = bitwise_xor(max(tx.origin % tx.origin, -9 > -9 + -9 > -9) > tx.origin % tx.origin / -9 / tx.origin % tx.origin, tx.origin % tx.origin / -9 / tx.origin % tx.origin <= max(tx.origin % tx.origin, -9 > -9 + -9 > -9))
v0: public(address)
v6: private(wei_value)
@public
def f3(av0: address):
    break
    break
@public
@payable
def f0(av0: address):
    break
    for v0 in range(-9):
        break
        break
    
    if tx.origin % tx.origin:
        break
        break
    
    else:
        break
        break
    
    if -9:
        break
        for v0 in range(-9):
            break
            break
        
    
    elif -9 / tx.origin % tx.origin:
        break
    
    else:
        break
        for v0 in range(-9):
            break
            break
        
    

RUNNING:
cv8: constant(address) = bitwise_xor(max(tx.origin % tx.origin, -9 > -9 + -9 > -9) > tx.origin % tx.origin / -9 / tx.origin % tx.origin, tx.origin % tx.origin / -9 / tx.origin % tx.origin <= max(tx.origin % tx.origin, -9 > -9 + -9 > -9))
v0: public(address)
v1: public(wei_value)
@public
def f3(av0: address):
    break
    break
@public
@payable
def f0(av0: address):
    break
    for v0 in range(-9):
        break
        break
    
    if tx.origin % tx.origin:
        break
        break
    
    else:
        break
        break
    
    if -9:
        break
        for v0 in range(-9):
            break
            break
        
    
    elif -9 / tx.origin % tx.origin:
        break
    
    else:
        break
        for v0 in range(-9):
            break
            break
        
    

RUNNING:
cv8: constant(address) = bitwise_xor(max(tx.origin % tx.origin, -9 > -9 + -9 > -9) > tx.origin % tx.origin / -9 / tx.origin % tx.origin, tx.origin % tx.origin / -9 / tx.origin % tx.origin <= max(tx.origin % tx.origin, -9 > -9 + -9 > -9))
v0: public(address)
v1: address
@public
def f3(av0: address):
    break
    break
@public
@payable
def f0(av0: address):
    break
    for v0 in range(-9):
        break
        break
    
    if tx.origin % tx.origin:
        break
        break
    
    else:
        break
        break
    
    if -9:
        break
        for v0 in range(-9):
            break
            break
        
    
    elif -9 / tx.origin % tx.origin:
        break
    
    else:
        break
        for v0 in range(-9):
            break
            break
        
    

RUNNING:
@public
def f3(av0: address):
    break
    break
@public
@payable
def f0(av0: address):
    break
    for v0 in range(-9):
        break
        break
    
    if tx.origin % tx.origin:
        break
        break
    
    else:
        break
        break
    
    if -9:
        break
        for v0 in range(-9):
            break
            break
        
    
    elif -9 / tx.origin % tx.origin:
        break
    
    else:
        break
        for v0 in range(-9):
            break
            break
        
    

================================================================================
COMPILING:
@public
def f3(av0: address):
    break
    break
@public
@payable
def f0(av0: address):
    break
    for v0 in range(-9):
        break
        break
    
    if tx.origin % tx.origin:
        break
        break
    
    else:
        break
        break
    
    if -9:
        break
        for v0 in range(-9):
            break
            break
        
    
    elif -9 / tx.origin % tx.origin:
        break
    
    else:
        break
        for v0 in range(-9):
            break
            break
        
    

RAISED: CompilerPanic('Number of times repeated must be a constant nonzero positive integer: -9')
================================================================================
TEST failure.43989.full.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x166490320>)
67.43404483795166 ELAPSED
STATEMENTS: 2772 BRANCHES: 3573
NEW STATEMENTS: 52 BRANCHES: 73
RUNNING TEST failure.43989.reduced.test
RUNNING:
@public
def f3(av0: address):
    break

RUNNING:
@public
def f3(av0: address):
    break
@public
@payable
def f0(av0: address):
    break
    for v0 in range(-9):
        break
    

================================================================================
COMPILING:
@public
def f3(av0: address):
    break
@public
@payable
def f0(av0: address):
    break
    for v0 in range(-9):
        break
    

RAISED: CompilerPanic('Number of times repeated must be a constant nonzero positive integer: -9')
================================================================================
TEST failure.43989.reduced.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x16652d6e0>)
67.48116612434387 ELAPSED
STATEMENTS: 2772 BRANCHES: 3573
RUNNING TEST failure.59270.0.test
RUNNING:
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("3")

================================================================================
COMPILING:
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("3")

RAISED: Exception('Clamp always fails')
================================================================================
TEST failure.59270.0.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x16650f3c0>)
67.5062940120697 ELAPSED
STATEMENTS: 2772 BRANCHES: 3573
RUNNING TEST failure.59270.full.test
RUNNING:
v0: decimal

RUNNING:

RUNNING:
v0: decimal
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
v6: public(int128)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
v6: public(int128)

RUNNING:
v0: decimal
@public
@nonreentrant("k1")
@constant
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("3")

RUNNING:
v6: public(int128)
@public
@nonreentrant("k1")
@constant
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("3")

RUNNING:
@public
@nonreentrant("k1")
@constant
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("3")

RUNNING:
cv3: constant(timedelta) = bitwise_xor(block.timestamp, max(MAX_DECIMAL and MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) * MAX_DECIMAL and MAX_DECIMAL) / block.difficulty - block.difficulty
v0: decimal
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv3: constant(timedelta) = bitwise_xor(block.timestamp, max(MAX_DECIMAL and MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) * MAX_DECIMAL and MAX_DECIMAL) / block.difficulty - block.difficulty
v0: decimal
@public
@nonreentrant("k1")
@constant
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("3")

RUNNING:
cv3: constant(timedelta) = bitwise_xor(block.timestamp, max(MAX_DECIMAL and MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) * MAX_DECIMAL and MAX_DECIMAL) / block.difficulty - block.difficulty
v6: public(int128)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv3: constant(timedelta) = bitwise_xor(block.timestamp, max(MAX_DECIMAL and MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) * MAX_DECIMAL and MAX_DECIMAL) / block.difficulty - block.difficulty
v6: public(int128)
@public
@nonreentrant("k1")
@constant
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("3")

RUNNING:
cv3: constant(timedelta) = bitwise_xor(block.timestamp, max(MAX_DECIMAL and MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) * MAX_DECIMAL and MAX_DECIMAL) / block.difficulty - block.difficulty
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
cv3: constant(timedelta) = bitwise_xor(block.timestamp, max(MAX_DECIMAL and MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) * MAX_DECIMAL and MAX_DECIMAL) / block.difficulty - block.difficulty
@public
@nonreentrant("k1")
@constant
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("3")

RUNNING:
cv3: constant(timedelta) = bitwise_xor(block.timestamp, max(MAX_DECIMAL and MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) * MAX_DECIMAL and MAX_DECIMAL) / block.difficulty - block.difficulty

RUNNING:
cv3: constant(timedelta) = bitwise_xor(block.timestamp, max(MAX_DECIMAL and MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) * MAX_DECIMAL and MAX_DECIMAL) / block.difficulty - block.difficulty
v0: decimal

RUNNING:
cv3: constant(timedelta) = bitwise_xor(block.timestamp, max(MAX_DECIMAL and MAX_DECIMAL, MAX_DECIMAL + MAX_DECIMAL) * MAX_DECIMAL and MAX_DECIMAL) / block.difficulty - block.difficulty
v6: public(int128)

RUNNING:
v0: decimal
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("3")

================================================================================
COMPILING:
v0: decimal
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("3")

RAISED: Exception('Clamp always fails')
================================================================================
TEST failure.59270.full.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x1665c11e0>)
68.10615587234497 ELAPSED
STATEMENTS: 2773 BRANCHES: 3576
NEW STATEMENTS: 1 BRANCHES: 3
RUNNING TEST failure.59270.reduced.test
RUNNING:
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("3")

================================================================================
COMPILING:
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    raise("3")

RAISED: Exception('Clamp always fails')
================================================================================
TEST failure.59270.reduced.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x1665005f0>)
68.13302397727966 ELAPSED
STATEMENTS: 2773 BRANCHES: 3576
RUNNING TEST failure.64110.0.test
RUNNING:
@private
@nonreentrant("k0")
def f5():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    break

================================================================================
COMPILING:
@private
@nonreentrant("k0")
def f5():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    break

RAISED: Exception('Clamp always fails')
================================================================================
TEST failure.64110.0.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x10f4c12d0>)
68.15944981575012 ELAPSED
STATEMENTS: 2773 BRANCHES: 3576
RUNNING TEST failure.64110.1.test
RUNNING:
@public
@nonreentrant("k0")
def __default__():
    lv0: bool = -10 >= -10
    continue
    for v4 in range(MIN_INT128):
        continue
    

================================================================================
COMPILING:
@public
@nonreentrant("k0")
def __default__():
    lv0: bool = -10 >= -10
    continue
    for v4 in range(MIN_INT128):
        continue
    

RAISED: CompilerPanic('Number of times repeated must be a constant nonzero positive integer: -170141183460469231731687303715884105728')
================================================================================
TEST failure.64110.1.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x166472b40>)
68.18520283699036 ELAPSED
STATEMENTS: 2777 BRANCHES: 3583
NEW STATEMENTS: 4 BRANCHES: 7
RUNNING TEST failure.64110.full.test
RUNNING:
@public
@payable
@nonreentrant("k0")
def __default__():
    lv0: bool = -10 >= -10
    continue

RUNNING:
v0: int128
@public
@payable
@nonreentrant("k0")
def __default__():
    lv0: bool = -10 >= -10
    continue

RUNNING:
v0: int128

RUNNING:

RUNNING:
cv1: constant(bool) = block.number
v0: int128
@public
@payable
@nonreentrant("k0")
def __default__():
    lv0: bool = -10 >= -10
    continue

RUNNING:
cv1: constant(bool) = block.number
@public
@payable
@nonreentrant("k0")
def __default__():
    lv0: bool = -10 >= -10
    continue

RUNNING:
cv1: constant(bool) = block.number

RUNNING:
cv1: constant(bool) = block.number
v0: int128

RUNNING:
cv1: constant(bool) = block.number
v0: int128
@public
@nonreentrant("k0")
def __default__():
    lv0: bool = -10 >= -10
    continue
    for v4 in range(MIN_INT128):
        continue
    

RUNNING:
v0: int128
@public
@nonreentrant("k0")
def __default__():
    lv0: bool = -10 >= -10
    continue
    for v4 in range(MIN_INT128):
        continue
    

================================================================================
COMPILING:
v0: int128
@public
@nonreentrant("k0")
def __default__():
    lv0: bool = -10 >= -10
    continue
    for v4 in range(MIN_INT128):
        continue
    

RAISED: CompilerPanic('Number of times repeated must be a constant nonzero positive integer: -170141183460469231731687303715884105728')
================================================================================
TEST failure.64110.full.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x166508aa0>)
68.60307288169861 ELAPSED
STATEMENTS: 2793 BRANCHES: 3604
NEW STATEMENTS: 16 BRANCHES: 21
RUNNING TEST failure.64110.reduced.test
RUNNING:
@public
@nonreentrant("k0")
def __default__():
    lv0: bool = -10 >= -10
    continue
    for v4 in range(MIN_INT128):
        continue
    

================================================================================
COMPILING:
@public
@nonreentrant("k0")
def __default__():
    lv0: bool = -10 >= -10
    continue
    for v4 in range(MIN_INT128):
        continue
    

RAISED: CompilerPanic('Number of times repeated must be a constant nonzero positive integer: -170141183460469231731687303715884105728')
================================================================================
TEST failure.64110.reduced.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x16651c960>)
68.62719798088074 ELAPSED
STATEMENTS: 2793 BRANCHES: 3604
RUNNING TEST failure.96119.0.test
RUNNING:
@public
@payable
@nonreentrant("k0")
def __init__():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    continue

================================================================================
COMPILING:
@public
@payable
@nonreentrant("k0")
def __init__():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    continue

RAISED: Exception('Clamp always fails')
================================================================================
TEST failure.96119.0.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x166516f50>)
68.65182209014893 ELAPSED
STATEMENTS: 2802 BRANCHES: 3615
NEW STATEMENTS: 9 BRANCHES: 11
RUNNING TEST failure.96119.full.test
RUNNING:
v0: decimal

RUNNING:

RUNNING:
v0: decimal
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
v0: decimal
v9: address
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
v0: decimal
v9: address

RUNNING:
v0: decimal
v9: public(timestamp)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
v0: decimal
v9: public(timestamp)

RUNNING:
v0: decimal
v9: public(timestamp)
v3: private(decimal)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
v0: decimal
v9: public(timestamp)
v3: private(decimal)

RUNNING:
v3: private(decimal)
@private
@nonreentrant("k0")
def f0():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    assert MAX_DECIMAL + MAX_DECIMAL

RUNNING:
v3: private(decimal)

RUNNING:
v0: decimal
v9: public(timestamp)
v3: private(decimal)
@public
@payable
@nonreentrant("k0")
def __init__():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    continue

RUNNING:
v3: private(decimal)
@public
@payable
@nonreentrant("k0")
def __init__():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    continue

RUNNING:
v0: decimal
v9: address
@public
@payable
@nonreentrant("k0")
def __init__():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    continue

================================================================================
COMPILING:
v0: decimal
v9: address
@public
@payable
@nonreentrant("k0")
def __init__():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    continue

RAISED: Exception('Clamp always fails')
================================================================================
TEST failure.96119.full.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x1665c7a00>)
69.2062578201294 ELAPSED
STATEMENTS: 2805 BRANCHES: 3620
NEW STATEMENTS: 3 BRANCHES: 5
RUNNING TEST failure.96119.reduced.test
RUNNING:
@public
@payable
@nonreentrant("k0")
def __init__():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    continue

================================================================================
COMPILING:
@public
@payable
@nonreentrant("k0")
def __init__():
    lv0: decimal = MAX_DECIMAL + MAX_DECIMAL
    continue

RAISED: Exception('Clamp always fails')
================================================================================
TEST failure.96119.reduced.test FAILED:
(<class 'AssertionError'>, AssertionError(), <traceback object at 0x166478c30>)
69.23131585121155 ELAPSED
STATEMENTS: 2805 BRANCHES: 3620
TSTL INTERNAL COVERAGE REPORT:
/Users/adg326/tstl/examples/vyper/vyhelper.py ARCS: 55 [(-85, 86), (-36, 39), (-26, 27), (-23, 24), (24, -23), (27, 28), (28, -26), (39, 40), (39, 41), (40, -36), (41, 42), (42, 43), (43, 47), (47, 49), (49, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (63, 65), (64, 72), (65, 66), (65, 67), (66, 72), (67, 69), (69, 70), (70, 72), (72, 73), (73, 74), (74, 75), (74, 82), (75, 76), (76, 77), (77, 78), (78, 79), (79, 80), (80, 81), (81, -36), (82, 83), (83, -36), (86, 87), (87, 88), (88, 89), (88, 90), (89, 88), (90, -85)]
/Users/adg326/tstl/examples/vyper/vyhelper.py LINES: 46 [24, 27, 28, 39, 40, 41, 42, 43, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/cli/vyper_compile.py ARCS: 33 [(-208, 213), (-162, 163), (-157, 158), (158, 159), (159, -157), (163, 164), (164, 166), (166, 167), (166, 195), (167, 168), (168, 170), (170, -162), (170, 171), (171, 166), (195, -162), (213, 216), (216, 217), (217, 220), (220, 221), (221, 222), (221, 230), (222, 223), (223, 224), (224, 227), (227, 228), (228, 221), (230, 231), (231, 237), (237, 238), (238, 239), (239, 240), (240, 241), (241, -208)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/cli/vyper_compile.py LINES: 27 [158, 159, 163, 164, 166, 167, 168, 170, 171, 195, 213, 216, 217, 220, 221, 222, 223, 224, 227, 228, 230, 231, 237, 238, 239, 240, 241]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/signatures/interface.py ARCS: 37 [(-274, 274), (-272, 274), (-252, 252), (-244, 252), (-199, 200), (200, -199), (200, 202), (202, 203), (203, 204), (203, 237), (204, 217), (217, 203), (237, -199), (252, -252), (252, 252), (252, 253), (253, 255), (255, 256), (255, 269), (256, 258), (258, 255), (258, 259), (259, 260), (260, 261), (260, 263), (261, 258), (263, 264), (264, 267), (267, 258), (269, -244), (274, -274), (274, 275), (274, 277), (275, 274), (277, 279), (279, 288), (288, -272)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/signatures/interface.py LINES: 23 [200, 202, 203, 204, 217, 237, 252, 253, 255, 256, 258, 259, 260, 261, 263, 264, 267, 269, 274, 275, 277, 279, 288]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/ast_utils.py ARCS: 78 [(-176, 176), (-169, 169), (-166, 167), (-105, 106), (-84, 87), (-37, 45), (-27, 29), (29, -27), (29, 30), (30, 31), (31, 32), (32, 33), (33, 29), (45, 46), (46, 47), (47, 48), (48, 49), (49, 51), (51, 52), (52, 53), (53, 54), (54, 55), (54, 59), (55, 56), (56, 57), (57, 59), (59, 62), (62, -37), (62, 63), (63, 64), (64, 65), (64, 66), (65, 62), (66, 75), (75, 76), (76, 77), (77, 78), (78, 79), (79, 62), (87, 88), (87, 89), (88, -84), (89, 90), (89, 102), (90, 91), (91, 92), (92, 93), (93, 94), (94, 96), (96, -84), (102, -84), (106, 108), (108, 109), (109, -105), (109, 110), (110, 111), (111, 113), (113, 114), (114, 115), (115, 116), (116, 118), (118, -105), (167, 169), (167, 172), (169, -169), (169, 170), (170, -166), (170, 169), (172, 173), (172, 185), (173, 174), (174, 175), (175, 176), (176, -176), (176, 180), (180, -166), (180, 176), (185, -166)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/ast_utils.py LINES: 58 [29, 30, 31, 32, 33, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 59, 62, 63, 64, 65, 66, 75, 76, 77, 78, 79, 87, 88, 89, 90, 91, 92, 93, 94, 96, 102, 106, 108, 109, 110, 111, 113, 114, 115, 116, 118, 167, 169, 170, 172, 173, 174, 175, 176, 180, 185]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/pre_parser.py ARCS: 22 [(-69, 86), (86, 87), (87, 88), (88, 90), (90, 91), (91, 92), (92, 94), (94, 95), (94, 131), (95, 97), (97, 98), (98, 99), (99, 100), (100, 101), (101, 103), (103, 106), (106, 114), (114, 120), (120, 124), (124, 127), (127, 94), (131, -69)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/pre_parser.py LINES: 20 [86, 87, 88, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 103, 106, 114, 120, 124, 127, 131]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/parser_utils.py ARCS: 138 [(-934, 934), (-925, 925), (-915, 916), (-869, 888), (-858, 858), (-854, 855), (-846, 847), (-842, 843), (-819, 819), (-818, 819), (-812, 813), (-808, 809), (-797, 798), (-778, 781), (-770, 771), (-749, 751), (-523, 525), (-425, 426), (-381, 382), (-240, 242), (-68, 69), (69, 70), (70, 72), (72, 73), (73, -68), (242, 243), (243, 244), (244, 245), (245, -240), (382, 384), (384, 387), (387, 388), (387, 395), (388, 391), (391, 395), (395, 399), (399, 400), (399, 401), (400, -381), (401, 403), (403, 408), (408, 416), (416, 417), (417, -381), (426, 428), (428, 429), (428, 430), (429, -425), (430, 433), (433, -425), (525, 526), (526, 527), (527, 528), (528, 529), (529, 530), (530, 531), (531, 535), (535, 536), (535, 541), (536, 541), (541, 543), (543, 544), (544, -523), (751, 752), (751, 756), (752, 753), (753, 754), (754, 756), (756, 757), (756, 758), (757, -749), (758, 759), (758, 760), (759, -749), (760, 761), (760, 763), (761, -749), (763, -749), (771, 772), (772, 773), (773, 774), (774, -770), (781, 782), (782, 783), (783, 785), (785, -778), (798, 799), (799, 800), (799, 803), (800, 801), (801, -797), (803, -797), (809, 810), (810, -808), (813, 814), (814, 815), (815, 816), (816, -812), (819, -819), (819, 819), (819, 820), (820, 826), (826, 827), (827, -818), (827, 828), (828, 827), (843, 844), (844, -842), (847, -846), (855, 856), (855, 857), (856, -854), (857, 858), (857, 859), (858, -854), (858, 858), (859, 866), (866, -854), (888, 889), (889, -869), (916, 919), (919, 920), (920, 921), (920, 963), (921, 922), (922, 925), (925, -925), (925, 925), (925, 926), (926, 927), (927, 931), (931, 934), (934, -934), (934, 934), (934, 936), (936, 937), (937, -915), (963, -915)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/parser_utils.py LINES: 97 [69, 70, 72, 73, 242, 243, 244, 245, 382, 384, 387, 388, 391, 395, 399, 400, 401, 403, 408, 416, 417, 426, 428, 429, 430, 433, 525, 526, 527, 528, 529, 530, 531, 535, 536, 541, 543, 544, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 763, 771, 772, 773, 774, 781, 782, 783, 785, 798, 799, 800, 801, 803, 809, 810, 813, 814, 815, 816, 819, 820, 826, 827, 828, 843, 844, 847, 855, 856, 857, 858, 859, 866, 888, 889, 916, 919, 920, 921, 922, 925, 926, 927, 931, 934, 936, 937, 963]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/asttokens/asttokens.py ARCS: 54 [(-168, 173), (-156, 162), (-145, 150), (-134, 139), (-128, 132), (-118, 126), (-111, 116), (-79, 85), (-68, 76), (-62, 62), (-45, 46), (46, 47), (47, 52), (52, 55), (55, 56), (56, 59), (59, 62), (62, -62), (62, 62), (62, 64), (64, 65), (65, -45), (76, -68), (85, -79), (85, 86), (86, 87), (87, 88), (88, 89), (89, 85), (116, -111), (126, -118), (132, -128), (139, 140), (140, 141), (140, 143), (141, 143), (143, -134), (150, 151), (151, 152), (152, 153), (152, 154), (153, 152), (154, -145), (162, 163), (163, 164), (164, 165), (164, 166), (165, 164), (166, -156), (173, -168), (173, 174), (174, 173), (174, 175), (175, 173)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/asttokens/asttokens.py LINES: 35 [46, 47, 52, 55, 56, 59, 62, 64, 65, 76, 85, 86, 87, 88, 89, 116, 126, 132, 139, 140, 141, 143, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 173, 174, 175]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/asttokens/line_numbers.py ARCS: 28 [(-50, 54), (-44, 44), (-35, 39), (-30, 30), (-28, 30), (30, -30), (30, 30), (30, 31), (31, 32), (32, 33), (33, -28), (39, 40), (40, 41), (40, 48), (41, 42), (42, 44), (44, -44), (44, 44), (44, 45), (45, 46), (46, 48), (48, -35), (54, 55), (55, 56), (55, 57), (56, -50), (57, 60), (60, -50)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/asttokens/line_numbers.py LINES: 17 [30, 31, 32, 33, 39, 40, 41, 42, 44, 45, 46, 48, 54, 55, 56, 57, 60]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/asttokens/mark_tokens.py ARCS: 97 [(-250, 252), (-242, 244), (-236, 237), (-212, 216), (-191, 193), (-162, 165), (-122, 129), (-106, 111), (-99, 100), (-61, 67), (-49, 50), (-45, 46), (-40, 41), (41, 42), (42, 43), (43, -40), (46, 47), (47, -45), (50, 51), (51, 53), (53, 55), (53, 59), (55, 59), (59, -49), (67, 68), (68, 69), (69, 70), (69, 77), (70, 71), (70, 72), (71, 72), (72, 69), (72, 73), (73, 69), (77, 80), (80, 83), (83, 84), (83, 87), (84, 87), (87, 90), (90, 92), (92, 94), (92, 96), (94, 96), (96, 97), (97, -61), (100, 101), (101, 104), (104, -99), (111, 112), (112, 113), (112, 119), (113, 114), (113, 115), (114, 113), (115, 116), (115, 117), (116, -106), (117, 112), (119, -106), (119, 120), (120, 119), (129, 130), (130, 131), (131, 132), (131, 141), (132, 133), (133, 134), (133, 135), (134, 131), (135, 136), (135, 137), (136, 131), (137, 131), (141, 142), (141, 151), (142, 144), (144, 147), (147, 148), (148, 141), (151, 156), (156, -122), (165, -162), (193, 194), (194, 195), (195, 196), (196, -191), (216, 217), (217, 218), (218, 220), (220, -212), (237, -236), (244, 245), (245, 248), (248, -242), (252, 254), (254, -250)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/asttokens/mark_tokens.py LINES: 70 [41, 42, 43, 46, 47, 50, 51, 53, 55, 59, 67, 68, 69, 70, 71, 72, 73, 77, 80, 83, 84, 87, 90, 92, 94, 96, 97, 100, 101, 104, 111, 112, 113, 114, 115, 116, 117, 119, 120, 129, 130, 131, 132, 133, 134, 135, 136, 137, 141, 142, 144, 147, 148, 151, 156, 165, 193, 194, 195, 196, 216, 217, 218, 220, 237, 244, 245, 248, 252, 254]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/asttokens/util.py ARCS: 53 [(-240, 245), (-237, 238), (-144, 161), (-134, 138), (-130, 132), (-126, 128), (-101, 103), (-82, 87), (-63, 67), (-50, 55), (-45, 47), (47, -45), (55, -50), (67, -63), (87, -82), (103, 106), (106, -101), (106, 110), (110, 106), (110, 111), (111, 106), (128, -126), (132, -130), (138, -134), (161, 163), (163, 166), (166, 167), (167, 168), (168, 169), (169, 170), (170, 171), (170, 185), (171, 172), (172, 173), (172, 184), (173, 174), (174, 176), (176, 177), (177, 180), (180, 181), (181, 170), (181, 182), (182, 181), (184, 170), (185, -144), (238, -237), (245, 246), (246, 247), (246, 250), (247, 248), (248, 249), (249, 250), (250, -240)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/asttokens/util.py LINES: 36 [47, 55, 67, 87, 103, 106, 110, 111, 128, 132, 138, 161, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 180, 181, 182, 184, 185, 238, 245, 246, 247, 248, 249, 250]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/utils.py ARCS: 59 [(-270, 272), (-265, 265), (-264, 265), (-247, 255), (-223, 223), (-215, 216), (-113, 115), (-78, 79), (-73, 74), (-52, 53), (-34, 35), (-29, 30), (-22, 22), (22, -22), (30, -29), (35, 36), (36, 37), (36, 40), (37, 39), (39, 36), (40, 41), (41, -34), (53, 54), (54, 55), (54, 56), (55, 54), (56, -52), (74, -73), (79, -78), (115, 116), (116, 118), (118, 119), (118, 120), (119, -113), (120, 121), (121, -113), (216, 218), (218, 219), (219, 221), (221, 223), (223, -223), (223, 227), (227, 229), (229, 231), (231, 233), (233, 235), (235, 237), (237, 239), (239, 241), (241, 244), (244, -215), (255, 257), (257, 258), (258, 261), (261, -247), (265, -265), (265, -264), (265, 265), (272, -270)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/utils.py LINES: 40 [22, 30, 35, 36, 37, 39, 40, 41, 53, 54, 55, 56, 74, 79, 115, 116, 118, 119, 120, 121, 216, 218, 219, 221, 223, 227, 229, 231, 233, 235, 237, 239, 241, 244, 255, 257, 258, 261, 265, 272]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/ast.py ARCS: 14 [(-40, 42), (-36, 36), (-33, 35), (35, 36), (36, -36), (36, 37), (37, -33), (37, 36), (42, -40), (42, 43), (43, 44), (43, 45), (44, 42), (45, 42)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/ast.py LINES: 7 [35, 36, 37, 42, 43, 44, 45]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/compiler.py ARCS: 85 [(-305, 305), (-296, 302), (-224, 225), (-220, 221), (-88, 89), (-72, 73), (-60, 60), (-59, 59), (-55, 56), (-44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, -44), (50, 52), (52, -44), (52, 53), (53, -44), (53, 55), (55, 62), (56, 59), (59, -59), (59, 59), (59, 60), (60, -60), (60, -55), (60, 60), (62, 68), (68, 69), (69, -44), (73, 74), (74, 77), (77, 78), (78, 79), (78, 81), (79, 81), (81, 82), (82, 83), (82, 85), (83, 82), (83, 84), (84, 82), (85, -72), (89, 91), (91, 92), (92, 93), (92, 104), (93, 94), (94, 99), (99, 101), (101, 103), (103, 92), (104, -88), (221, -220), (225, -224), (302, 304), (304, 305), (305, -305), (305, 305), (305, 307), (307, 308), (308, 309), (309, 310), (310, 311), (311, 312), (311, 314), (312, -296), (314, 315), (315, 317), (317, 318), (318, 319), (319, 321), (321, 322), (322, 323), (323, 324), (324, 325), (325, 326), (326, 327), (327, 310), (327, 329), (329, 330), (330, 331), (331, -296)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/compiler.py LINES: 60 [45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 59, 60, 62, 68, 69, 73, 74, 77, 78, 79, 81, 82, 83, 84, 85, 89, 91, 92, 93, 94, 99, 101, 103, 104, 221, 225, 302, 304, 305, 307, 308, 309, 310, 311, 312, 314, 315, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/parser.py ARCS: 78 [(-212, 213), (-177, 177), (-174, 174), (-172, 172), (-164, 164), (-157, 157), (-155, 156), (-114, 122), (122, 123), (123, 125), (125, 126), (125, 136), (126, 127), (127, -114), (127, 129), (129, 130), (130, 131), (131, 125), (131, 132), (132, 133), (133, 131), (136, 137), (136, 145), (137, 138), (138, 139), (139, 140), (140, 141), (141, -114), (141, 143), (143, 146), (145, 146), (146, 147), (147, 150), (150, 151), (151, -114), (156, -155), (156, 157), (157, -157), (157, 157), (157, 159), (159, 164), (164, -164), (164, 166), (166, 172), (172, -172), (172, 172), (172, 174), (174, -174), (174, 174), (174, 177), (177, -177), (177, 178), (177, 179), (178, 180), (179, 182), (180, 177), (182, 183), (183, 185), (185, 186), (186, 188), (188, 191), (191, 192), (191, 201), (192, 193), (193, 194), (194, 195), (195, 196), (196, 197), (197, 201), (201, 202), (201, 207), (202, 203), (203, -155), (203, 207), (207, 209), (209, -155), (213, 214), (214, -212)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/parser.py LINES: 52 [122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 150, 151, 156, 157, 159, 164, 166, 172, 174, 177, 178, 179, 180, 182, 183, 185, 186, 188, 191, 192, 193, 194, 195, 196, 197, 201, 202, 203, 207, 209, 213, 214]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/global_context.py ARCS: 143 [(-510, 514), (-500, 501), (-387, 387), (-366, 367), (-360, 362), (-335, 337), (-307, 310), (-251, 253), (-247, 247), (-243, 245), (-199, 204), (-59, 61), (-42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, -42), (61, 65), (65, 66), (66, 68), (68, 70), (68, 168), (70, 98), (98, 100), (98, 114), (100, 104), (104, 112), (112, -59), (112, 68), (114, 115), (115, 119), (119, 68), (168, 176), (176, 177), (177, -59), (204, 205), (205, -199), (245, 247), (247, -247), (247, -243), (247, 247), (253, 254), (254, -251), (310, 311), (310, 314), (311, 314), (314, 315), (314, 316), (315, -307), (316, 317), (316, 318), (317, -307), (318, 320), (320, 327), (327, 328), (328, 330), (330, 332), (332, -307), (337, 338), (338, 339), (338, 342), (339, 340), (340, -335), (342, -335), (362, -360), (362, 363), (363, 364), (364, -360), (367, 369), (369, 376), (376, 380), (380, 381), (380, 385), (381, -366), (381, 382), (382, -366), (385, 386), (386, 387), (387, -387), (387, 387), (387, 388), (387, 390), (388, -366), (390, 392), (392, 398), (398, 404), (404, 436), (436, 439), (439, 445), (445, 463), (463, 464), (463, 485), (464, 467), (467, 468), (468, 469), (469, 470), (470, 471), (471, 472), (472, 474), (474, 475), (475, 476), (476, 477), (477, 478), (478, 481), (481, -366), (481, 482), (482, 483), (483, 481), (485, 486), (486, 487), (487, 488), (488, 489), (489, 490), (490, 491), (491, 492), (492, 493), (493, 495), (495, -366), (501, 502), (502, 503), (503, 504), (504, 505), (505, 506), (506, 507), (507, -500), (514, 516), (516, 517), (516, 519), (517, -510), (519, 520), (520, 521), (521, 522), (522, -510)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/global_context.py LINES: 112 [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 65, 66, 68, 70, 98, 100, 104, 112, 114, 115, 119, 168, 176, 177, 204, 205, 245, 247, 253, 254, 310, 311, 314, 315, 316, 317, 318, 320, 327, 328, 330, 332, 337, 338, 339, 340, 342, 362, 363, 364, 367, 369, 376, 380, 381, 382, 385, 386, 387, 388, 390, 392, 398, 404, 436, 439, 445, 463, 464, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 501, 502, 503, 504, 505, 506, 507, 514, 516, 517, 519, 520, 521, 522]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/constants.py ARCS: 59 [(-122, 126), (-110, 111), (-107, 108), (-87, 88), (-37, 38), (-34, 35), (-30, 31), (31, 32), (32, -30), (35, -34), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, -37), (45, 48), (48, 49), (49, 51), (51, 56), (56, 57), (56, 74), (57, 60), (60, 62), (62, 66), (66, 68), (68, 71), (71, 74), (74, 75), (74, 81), (75, 76), (76, 78), (78, -37), (81, 82), (82, 83), (83, 85), (85, -37), (88, 89), (89, 93), (93, 94), (94, 96), (96, 97), (97, 98), (98, 99), (99, -87), (99, 100), (100, -87), (108, -107), (111, 112), (112, 113), (113, 116), (116, 117), (117, 118), (118, -110), (126, 128), (128, 138), (138, -122)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/constants.py LINES: 48 [31, 32, 35, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 51, 56, 57, 60, 62, 66, 68, 71, 74, 75, 76, 78, 81, 82, 83, 85, 88, 89, 93, 94, 96, 97, 98, 99, 100, 108, 111, 112, 113, 116, 117, 118, 126, 128, 138]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/function_definitions/parse_function.py ARCS: 45 [(-32, 40), (-28, 29), (-23, 24), (24, -23), (29, -28), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, -32), (47, 51), (51, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 69), (69, 70), (69, 76), (70, 71), (71, 72), (72, 73), (73, -32), (73, 82), (76, 77), (77, 78), (78, 79), (79, -32), (79, 82), (82, 83), (83, 84), (84, 86), (86, 87), (87, -32)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/function_definitions/parse_function.py LINES: 38 [24, 29, 40, 41, 42, 43, 44, 45, 46, 47, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 76, 77, 78, 79, 82, 83, 84, 86, 87]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/signatures/function_signature.py ARCS: 206 [(-467, 469), (-464, 465), (-461, 462), (-385, 386), (-373, 374), (-359, 360), (-328, 329), (-319, 321), (-197, 197), (-155, 164), (-152, 152), (-140, 141), (-137, 140), (-132, 132), (-127, 127), (-120, 120), (-101, 104), (-69, 81), (-47, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, -47), (81, 82), (82, 83), (83, 84), (84, 85), (85, 86), (86, 87), (87, 88), (88, 89), (89, 90), (90, 91), (91, 92), (92, 93), (93, -69), (104, 105), (105, 106), (106, 108), (108, 109), (109, 110), (110, 115), (115, 117), (117, 119), (119, 120), (120, -120), (120, 120), (120, 121), (121, 126), (126, 127), (127, -127), (127, 128), (128, 127), (128, 131), (131, 132), (132, -132), (132, 133), (133, -101), (133, 132), (140, 152), (141, 143), (143, 144), (144, 145), (145, 146), (146, 147), (147, 148), (148, 149), (149, 150), (150, -140), (152, -152), (152, -137), (152, 152), (164, 165), (165, 167), (167, 168), (168, 170), (170, 171), (171, 175), (175, 180), (180, 181), (181, 183), (181, 223), (183, 184), (184, 187), (187, 188), (188, 189), (189, 190), (190, 191), (191, 192), (192, 193), (193, 194), (194, 197), (197, -197), (197, 202), (202, 203), (203, 204), (204, 205), (205, 206), (206, 207), (207, 208), (208, 210), (210, 211), (211, 212), (212, 213), (213, 214), (214, 215), (215, 218), (218, 221), (221, 181), (223, 224), (224, 225), (225, 226), (226, 227), (227, 230), (230, 231), (230, 255), (231, 232), (231, 233), (232, 230), (233, 234), (233, 235), (234, 230), (235, 236), (235, 237), (236, 230), (237, 238), (237, 239), (238, 230), (239, 240), (240, 245), (245, 246), (246, 230), (255, 259), (259, 263), (263, 267), (267, 272), (272, 273), (272, 281), (273, -155), (281, 282), (281, 283), (282, 298), (283, 284), (284, 285), (285, 286), (286, 287), (287, 288), (288, 289), (289, 290), (290, 298), (298, 299), (298, 301), (299, 301), (301, 304), (304, 305), (305, 306), (306, 307), (307, 308), (308, 309), (309, 310), (310, 311), (311, 312), (312, 313), (313, 314), (314, 315), (315, 316), (316, -155), (321, 322), (322, 323), (323, 324), (323, 325), (324, 325), (325, 326), (326, -319), (329, 341), (341, 353), (353, 354), (354, 355), (355, 356), (356, -328), (360, 362), (362, 368), (368, 369), (369, 370), (370, -359), (374, 375), (375, -373), (386, 387), (387, 389), (389, 393), (393, 394), (394, 395), (395, 396), (396, 397), (397, 398), (398, 401), (401, 403), (403, 407), (407, -385), (462, -461), (465, -464), (469, 470), (470, -467)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/signatures/function_signature.py LINES: 168 [49, 50, 51, 52, 53, 54, 55, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 104, 105, 106, 108, 109, 110, 115, 117, 119, 120, 121, 126, 127, 128, 131, 132, 133, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 164, 165, 167, 168, 170, 171, 175, 180, 181, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 197, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 218, 221, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 245, 246, 255, 259, 263, 267, 272, 273, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 298, 299, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 325, 326, 329, 341, 353, 354, 355, 356, 360, 362, 368, 369, 370, 374, 375, 386, 387, 389, 393, 394, 395, 396, 397, 398, 401, 403, 407, 462, 465, 469, 470]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/types/types.py ARCS: 125 [(-554, 555), (-549, 550), (-542, 543), (-531, 532), (-486, 487), (-336, 338), (-282, 283), (-244, 245), (-151, 152), (-140, 141), (-122, 123), (-117, 119), (-105, 111), (-91, 92), (-86, 86), (-83, 83), (-82, 83), (-67, 67), (-60, 60), (-39, 40), (-32, 33), (-23, 24), (24, 25), (25, -23), (33, 39), (39, 46), (40, 41), (41, 42), (42, 44), (44, -39), (46, 50), (50, 51), (51, 53), (53, 56), (56, 59), (59, 60), (60, -60), (60, 60), (60, 61), (60, 66), (61, 64), (64, 60), (66, 67), (67, -67), (67, 67), (67, 73), (73, 75), (75, 78), (78, -32), (83, -83), (83, 84), (84, 86), (86, -86), (86, -82), (92, -91), (111, 112), (112, 113), (113, 114), (114, 115), (115, -105), (119, -117), (119, 120), (120, -117), (123, 124), (124, 125), (124, 126), (125, 126), (126, 127), (126, 128), (127, 128), (128, -122), (141, -140), (152, -151), (245, 253), (253, 258), (258, 261), (261, 264), (264, 265), (265, 266), (265, 267), (266, -244), (267, 268), (268, -244), (283, 284), (284, 286), (286, -282), (338, 339), (338, 355), (339, 340), (339, 341), (340, -336), (341, 342), (342, -336), (355, 357), (357, 388), (388, 392), (392, 401), (401, 403), (403, 404), (404, 407), (407, 409), (409, 410), (409, 413), (410, 411), (411, 415), (413, 414), (414, 415), (415, 417), (417, 418), (418, -336), (487, 488), (487, 489), (488, -486), (489, 490), (490, -486), (532, 533), (533, 538), (538, -531), (543, 544), (544, 545), (545, -542), (550, -549), (555, 556), (556, 557), (557, -554)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/types/types.py LINES: 88 [24, 25, 33, 39, 40, 41, 42, 44, 46, 50, 51, 53, 56, 59, 60, 61, 64, 66, 67, 73, 75, 78, 83, 84, 86, 92, 111, 112, 113, 114, 115, 119, 120, 123, 124, 125, 126, 127, 128, 141, 152, 245, 253, 258, 261, 264, 265, 266, 267, 268, 283, 284, 286, 338, 339, 340, 341, 342, 355, 357, 388, 392, 401, 403, 404, 407, 409, 410, 411, 413, 414, 415, 417, 418, 487, 488, 489, 490, 532, 533, 538, 543, 544, 545, 550, 555, 556, 557]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/Crypto/Hash/keccak.py ARCS: 40 [(-135, 153), (-98, 106), (-81, 88), (-63, 65), (65, 67), (67, 68), (68, 70), (70, 71), (71, 72), (72, 73), (73, 74), (74, 76), (76, 77), (77, 78), (78, 79), (79, -63), (88, 91), (91, 92), (92, 93), (93, 94), (94, 96), (96, -81), (106, 107), (107, 108), (108, 109), (109, 110), (110, 111), (111, 114), (114, -98), (153, 154), (154, 156), (156, 157), (157, 158), (158, 160), (160, 162), (162, 166), (166, 168), (168, 170), (170, 173), (173, -135)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/Crypto/Hash/keccak.py LINES: 36 [65, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 88, 91, 92, 93, 94, 96, 106, 107, 108, 109, 110, 111, 114, 153, 154, 156, 157, 158, 160, 162, 166, 168, 170, 173]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/Crypto/Util/_raw_api.py ARCS: 31 [(-272, 273), (-265, 266), (-261, 262), (-159, 160), (-156, 157), (-153, 154), (-150, 151), (-138, 139), (-134, 136), (-117, 120), (-113, 115), (115, -113), (120, 125), (125, 127), (127, 128), (128, -117), (136, -134), (139, 142), (142, 143), (143, -138), (151, -150), (154, -153), (157, -156), (160, -159), (262, 263), (263, -261), (266, -265), (273, 274), (274, 275), (275, 276), (276, -272)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/Crypto/Util/_raw_api.py LINES: 20 [115, 120, 125, 127, 128, 136, 139, 142, 143, 151, 154, 157, 160, 262, 263, 266, 273, 274, 275, 276]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/cffi/api.py ARCS: 61 [(-907, 908), (-896, 897), (-873, 874), (-830, 831), (-429, 430), (-238, 261), (-176, 178), (-158, 160), (160, 161), (161, 164), (164, 167), (167, 168), (168, 169), (169, 171), (171, 172), (172, 173), (173, 174), (174, -158), (178, 179), (179, 180), (179, 184), (180, 181), (181, 182), (182, 184), (184, 185), (185, 188), (188, -176), (261, 262), (262, 263), (263, -238), (430, 432), (432, 433), (433, 434), (434, 435), (435, 436), (436, 437), (437, 439), (439, -429), (831, 832), (832, 833), (833, 834), (834, 835), (835, -830), (874, 877), (877, 878), (877, 892), (878, 879), (879, 880), (880, 881), (881, 877), (892, 894), (894, -873), (897, 898), (898, 900), (900, 901), (900, 904), (901, 902), (902, 904), (904, -896), (908, 909), (909, -907)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/cffi/api.py LINES: 50 [160, 161, 164, 167, 168, 169, 171, 172, 173, 174, 178, 179, 180, 181, 182, 184, 185, 188, 261, 262, 263, 430, 432, 433, 434, 435, 436, 437, 439, 831, 832, 833, 834, 835, 874, 877, 878, 879, 880, 881, 892, 894, 897, 898, 900, 901, 902, 904, 908, 909]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/cffi/cparser.py ARCS: 159 [(-827, 830), (-565, 567), (-556, 557), (-544, 545), (-522, 523), (-519, 520), (-276, 277), (-224, 230), (-166, 169), (-147, 148), (-97, 110), (-49, 51), (51, 53), (53, -49), (110, 111), (111, 112), (112, 113), (113, 114), (114, 144), (144, 145), (145, -97), (148, 149), (149, -147), (169, 171), (171, 172), (172, 176), (176, 178), (178, 186), (186, 187), (187, 188), (188, 191), (191, 194), (194, 197), (197, 204), (204, 205), (205, 217), (217, 219), (219, 222), (222, -166), (230, 231), (231, 232), (232, 233), (233, 234), (234, 235), (235, 236), (236, 237), (237, 238), (238, 239), (239, 240), (240, 241), (240, 261), (241, 242), (241, 260), (242, 243), (242, 247), (243, 260), (247, 250), (250, 251), (250, 252), (251, 260), (252, 253), (252, 254), (253, 260), (254, 259), (259, 260), (260, 240), (261, -224), (277, 282), (282, 283), (283, 284), (284, 285), (284, 289), (285, 284), (289, 291), (291, 292), (292, 293), (293, 294), (293, 295), (294, 293), (295, 299), (299, 300), (300, 301), (301, 302), (302, 303), (303, 304), (304, 305), (305, 309), (309, 310), (310, 312), (312, -276), (520, -519), (523, 524), (524, 525), (525, 526), (526, 528), (528, -522), (545, 546), (546, 547), (547, 548), (548, 550), (550, 552), (552, 554), (554, -544), (557, 559), (559, 563), (563, -556), (567, 568), (567, 575), (568, 569), (569, 570), (570, 575), (575, 577), (575, 586), (577, 578), (577, 580), (578, 582), (580, 581), (581, 582), (582, 583), (583, 584), (584, -565), (586, 588), (586, 593), (588, 589), (589, 590), (590, 591), (591, -565), (593, 594), (594, 595), (595, 596), (596, 599), (599, 600), (600, 601), (601, 602), (602, 603), (603, 604), (604, 608), (608, 610), (610, 611), (611, 612), (611, 614), (612, 611), (614, 616), (616, 619), (619, 620), (620, 621), (621, 622), (621, 623), (622, -565), (623, 626), (626, 627), (627, -565), (830, 831), (831, 832), (832, 833), (833, 834), (834, 835), (835, 838), (838, -827)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/cffi/cparser.py LINES: 134 [51, 53, 110, 111, 112, 113, 114, 144, 145, 148, 149, 169, 171, 172, 176, 178, 186, 187, 188, 191, 194, 197, 204, 205, 217, 219, 222, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 250, 251, 252, 253, 254, 259, 260, 261, 277, 282, 283, 284, 285, 289, 291, 292, 293, 294, 295, 299, 300, 301, 302, 303, 304, 305, 309, 310, 312, 520, 523, 524, 525, 526, 528, 545, 546, 547, 548, 550, 552, 554, 557, 559, 563, 567, 568, 569, 570, 575, 577, 578, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 608, 610, 611, 612, 614, 616, 619, 620, 621, 622, 623, 626, 627, 830, 831, 832, 833, 834, 835, 838]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/pycparser/c_parser.py ARCS: 218 [(-1836, 1838), (-1764, 1770), (-1713, 1715), (-1674, 1676), (-1644, 1646), (-1636, 1638), (-1610, 1631), (-1601, 1605), (-1568, 1572), (-1564, 1566), (-1413, 1416), (-1388, 1391), (-1383, 1386), (-1277, 1280), (-1245, 1249), (-1236, 1240), (-1200, 1204), (-1171, 1176), (-1106, 1110), (-1094, 1098), (-1088, 1092), (-862, 866), (-853, 857), (-838, 844), (-822, 836), (-808, 815), (-802, 805), (-797, 800), (-766, 769), (-741, 744), (-681, 685), (-546, 549), (-529, 532), (-522, 527), (-513, 517), (-375, 381), (-351, 366), (-347, 347), (-306, 311), (-251, 262), (-210, 215), (-201, 207), (-182, 185), (-172, 176), (-163, 166), (-132, 145), (145, 146), (146, 147), (147, 148), (148, 149), (149, 150), (150, 151), (151, 152), (152, -132), (166, 170), (170, -163), (176, 180), (180, -172), (185, 188), (185, 190), (188, 189), (189, -182), (189, 185), (190, -182), (207, 208), (208, -201), (215, -210), (262, 263), (263, 267), (267, 273), (273, 274), (273, 281), (274, 275), (275, -251), (281, 283), (283, 286), (286, 287), (287, 288), (288, -251), (311, 312), (312, 313), (312, 315), (313, 312), (315, 316), (316, 324), (324, 325), (324, 333), (325, 324), (333, 346), (346, 347), (347, -347), (347, 347), (347, 348), (348, 349), (349, -306), (366, 368), (368, 369), (368, 371), (369, 373), (371, 373), (373, -351), (381, 382), (382, 386), (386, 394), (394, 416), (416, 417), (417, 418), (418, 419), (419, 420), (419, 421), (420, 419), (421, 425), (425, 426), (425, 462), (426, 427), (427, 428), (427, 435), (428, 429), (429, 430), (430, 431), (431, 432), (432, 433), (433, 445), (435, 436), (436, 437), (437, 438), (438, 439), (439, 440), (440, 441), (441, 442), (442, 443), (443, 445), (445, 446), (446, 449), (449, 454), (454, 455), (455, 456), (455, 458), (456, 460), (458, 460), (460, 425), (462, -375), (517, 520), (520, -513), (527, -522), (532, 533), (533, 534), (534, -529), (549, -546), (685, 689), (689, 719), (719, 720), (720, 721), (721, 722), (722, 724), (724, -681), (744, -741), (769, -766), (800, -797), (805, -802), (815, -808), (836, -822), (844, -838), (857, -853), (866, -862), (1092, -1088), (1098, -1094), (1110, 1111), (1111, 1112), (1112, 1113), (1113, 1114), (1114, -1106), (1176, 1177), (1177, 1178), (1178, 1179), (1179, 1192), (1192, 1198), (1198, -1171), (1204, 1220), (1220, 1221), (1221, 1228), (1228, -1200), (1240, 1243), (1243, -1236), (1249, 1250), (1250, -1245), (1280, 1281), (1281, 1289), (1289, 1298), (1298, 1299), (1299, 1300), (1300, 1301), (1301, 1302), (1302, 1303), (1303, 1304), (1304, 1306), (1306, -1277), (1386, -1383), (1391, -1388), (1416, 1417), (1417, 1418), (1418, 1419), (1419, 1420), (1420, -1413), (1566, -1564), (1572, 1573), (1573, -1568), (1605, 1606), (1606, -1601), (1631, 1632), (1632, -1610), (1638, -1636), (1646, -1644), (1676, -1674), (1715, -1713), (1770, 1771), (1771, -1764), (1838, -1836)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/pycparser/c_parser.py LINES: 160 [145, 146, 147, 148, 149, 150, 151, 152, 166, 170, 176, 180, 185, 188, 189, 190, 207, 208, 215, 262, 263, 267, 273, 274, 275, 281, 283, 286, 287, 288, 311, 312, 313, 315, 316, 324, 325, 333, 346, 347, 348, 349, 366, 368, 369, 371, 373, 381, 382, 386, 394, 416, 417, 418, 419, 420, 421, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 449, 454, 455, 456, 458, 460, 462, 517, 520, 527, 532, 533, 534, 549, 685, 689, 719, 720, 721, 722, 724, 744, 769, 800, 805, 815, 836, 844, 857, 866, 1092, 1098, 1110, 1111, 1112, 1113, 1114, 1176, 1177, 1178, 1179, 1192, 1198, 1204, 1220, 1221, 1228, 1240, 1243, 1249, 1250, 1280, 1281, 1289, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1306, 1386, 1391, 1416, 1417, 1418, 1419, 1420, 1566, 1572, 1573, 1605, 1606, 1631, 1632, 1638, 1646, 1676, 1715, 1770, 1771, 1838]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/pycparser/c_lexer.py ARCS: 34 [(-475, 477), (-439, 441), (-326, 328), (-277, 279), (-268, 270), (-261, 263), (-247, 249), (-76, 77), (-73, 74), (-68, 71), (71, -68), (74, -73), (77, 78), (78, -76), (249, 250), (250, 251), (251, -247), (263, 266), (266, -261), (270, 271), (271, 275), (275, -268), (279, 282), (282, 284), (284, 285), (285, 287), (287, -277), (328, -326), (441, -439), (477, 478), (478, 479), (478, 480), (479, 480), (480, -475)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/pycparser/c_lexer.py LINES: 23 [71, 74, 77, 78, 249, 250, 251, 263, 266, 270, 271, 275, 279, 282, 284, 285, 287, 328, 441, 477, 478, 479, 480]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/pycparser/ply/yacc.py ARCS: 104 [(-1001, 1003), (-323, 324), (-268, 269), (-257, 258), (-254, 255), (-248, 249), (-240, 241), (-234, 235), (235, 236), (236, 237), (237, 238), (238, -234), (241, 243), (243, 244), (244, -240), (249, -248), (255, -254), (258, -257), (269, -268), (324, 328), (328, 331), (331, -323), (1003, 1004), (1004, 1005), (1005, 1006), (1006, 1007), (1007, 1008), (1008, 1009), (1009, 1010), (1010, 1014), (1014, 1019), (1019, 1020), (1020, 1023), (1023, 1024), (1024, 1026), (1026, 1028), (1028, 1033), (1033, 1037), (1037, 1038), (1038, 1039), (1039, 1040), (1040, 1042), (1042, 1043), (1043, 1047), (1047, 1048), (1048, 1049), (1049, 1050), (1050, 1051), (1051, 1052), (1052, 1058), (1058, 1059), (1058, 1072), (1059, 1060), (1059, 1069), (1060, 1061), (1061, 1064), (1064, 1065), (1064, 1069), (1065, 1066), (1066, 1069), (1069, 1070), (1070, 1075), (1072, 1075), (1075, 1076), (1076, 1078), (1076, 1090), (1078, 1079), (1079, 1082), (1082, 1083), (1083, 1086), (1086, 1058), (1090, 1092), (1090, 1171), (1092, 1093), (1093, 1094), (1094, 1097), (1097, 1098), (1098, 1099), (1099, 1102), (1102, 1103), (1102, 1141), (1103, 1104), (1104, 1112), (1112, 1114), (1114, 1116), (1116, 1117), (1117, 1118), (1118, 1119), (1119, 1120), (1120, 1121), (1121, 1122), (1122, 1058), (1141, 1148), (1148, 1150), (1150, 1152), (1152, 1153), (1153, 1154), (1154, 1155), (1155, 1156), (1156, 1058), (1171, 1172), (1172, 1173), (1173, 1174), (1174, -1001)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/pycparser/ply/yacc.py LINES: 90 [235, 236, 237, 238, 241, 243, 244, 249, 255, 258, 269, 324, 328, 331, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1019, 1020, 1023, 1024, 1026, 1028, 1033, 1037, 1038, 1039, 1040, 1042, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1058, 1059, 1060, 1061, 1064, 1065, 1066, 1069, 1070, 1072, 1075, 1076, 1078, 1079, 1082, 1083, 1086, 1090, 1092, 1093, 1094, 1097, 1098, 1099, 1102, 1103, 1104, 1112, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1141, 1148, 1150, 1152, 1153, 1154, 1155, 1156, 1171, 1172, 1173, 1174]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/pycparser/ply/lex.py ARCS: 57 [(-305, 307), (-263, 264), (-251, 253), (253, 254), (254, 256), (256, 257), (257, 258), (258, -251), (264, 266), (266, 267), (267, 268), (268, 269), (269, 270), (270, 271), (271, -263), (307, 308), (308, 309), (309, 310), (310, 312), (312, 314), (312, 398), (314, 315), (314, 319), (315, 316), (316, 312), (319, 320), (320, 321), (321, 322), (321, 325), (322, 319), (325, 326), (326, 327), (327, 328), (328, 330), (330, 331), (331, 333), (333, 335), (333, 342), (335, 336), (336, 337), (337, -305), (342, 346), (346, 347), (347, 348), (348, 350), (350, 353), (353, 354), (353, 359), (354, 355), (355, 356), (356, 312), (359, 365), (365, -305), (398, 409), (409, 410), (410, 412), (412, -305)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/pycparser/ply/lex.py LINES: 49 [253, 254, 256, 257, 258, 264, 266, 267, 268, 269, 270, 271, 307, 308, 309, 310, 312, 314, 315, 316, 319, 320, 321, 322, 325, 326, 327, 328, 330, 331, 333, 335, 336, 337, 342, 346, 347, 348, 350, 353, 354, 355, 356, 359, 365, 398, 409, 410, 412]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/pycparser/plyparser.py ARCS: 20 [(-125, 126), (-55, 60), (-49, 50), (-42, 43), (-20, 21), (21, 22), (22, 23), (23, -20), (43, -42), (50, 51), (51, 52), (52, 53), (53, -49), (60, 61), (61, 62), (61, 63), (62, 63), (63, 64), (64, -55), (126, -125)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/pycparser/plyparser.py LINES: 14 [21, 22, 23, 43, 50, 51, 52, 53, 60, 61, 62, 63, 64, 126]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/pycparser/c_ast.py ARCS: 51 [(-994, 995), (-974, 975), (-955, 956), (-833, 834), (-815, 816), (-716, 717), (-637, 638), (-569, 570), (-383, 384), (-352, 353), (-169, 170), (170, 171), (171, 172), (172, 173), (173, -169), (353, 354), (354, 355), (355, -352), (384, 385), (385, 386), (386, 387), (387, 388), (388, 389), (389, 390), (390, 391), (391, -383), (570, 571), (571, -569), (638, 639), (639, 640), (640, -637), (717, 718), (718, -716), (816, 817), (817, -815), (834, 835), (835, 836), (836, -833), (956, 957), (957, 958), (958, 959), (959, -955), (975, 976), (976, 977), (977, 978), (978, 979), (979, -974), (995, 996), (996, 997), (997, 998), (998, -994)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/pycparser/c_ast.py LINES: 40 [170, 171, 172, 173, 353, 354, 355, 384, 385, 386, 387, 388, 389, 390, 391, 570, 571, 638, 639, 640, 717, 718, 816, 817, 834, 835, 836, 956, 957, 958, 959, 975, 976, 977, 978, 979, 995, 996, 997, 998]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/cffi/model.py ARCS: 75 [(-586, 587), (-313, 314), (-297, 298), (-272, 273), (-264, 265), (-242, 243), (-174, 175), (-81, 82), (-74, 75), (-69, 69), (-68, 69), (-56, 57), (-12, 13), (13, 15), (15, 17), (17, 22), (22, -12), (57, 58), (58, 59), (58, 63), (59, 60), (60, 61), (61, 62), (62, 63), (63, -56), (69, -69), (69, -68), (69, 69), (75, 76), (76, -74), (82, -81), (175, -174), (243, 244), (244, 245), (245, 246), (245, 247), (246, 245), (247, 248), (248, 254), (254, 255), (255, -242), (265, 266), (266, 267), (267, 268), (268, 270), (270, -264), (273, 274), (274, -272), (298, 299), (299, 301), (301, 302), (301, 303), (302, 308), (303, 306), (306, 308), (308, -297), (314, 317), (317, 318), (318, 319), (319, -313), (587, 588), (588, 589), (589, 590), (590, -586), (590, 591), (591, 592), (592, 593), (593, 594), (594, 600), (600, 601), (601, 602), (602, 603), (603, 604), (604, 605), (605, -586)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/cffi/model.py LINES: 56 [13, 15, 17, 22, 57, 58, 59, 60, 61, 62, 63, 69, 75, 76, 82, 175, 243, 244, 245, 246, 247, 248, 254, 255, 265, 266, 267, 268, 270, 273, 274, 298, 299, 301, 302, 303, 306, 308, 314, 317, 318, 319, 587, 588, 589, 590, 591, 592, 593, 594, 600, 601, 602, 603, 604, 605]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/Crypto/Util/py3compat.py ARCS: 2 [(-132, 133), (133, -132)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/Crypto/Util/py3compat.py LINES: 1 [133]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/cffi/commontypes.py ARCS: 3 [(-25, 26), (26, 27), (27, -25)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/cffi/commontypes.py LINES: 2 [26, 27]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/memory_allocator.py ARCS: 9 [(-24, 25), (-20, 21), (-16, 17), (17, -16), (21, -20), (25, 29), (29, 30), (30, 31), (31, -24)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/memory_allocator.py LINES: 6 [17, 21, 25, 29, 30, 31]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/context.py ARCS: 73 [(-171, 172), (-163, 164), (-149, 150), (-133, 135), (-121, 123), (-114, 116), (-107, 109), (-101, 103), (-86, 87), (-25, 39), (39, 41), (41, 43), (43, 45), (45, 47), (47, 49), (49, 51), (51, 53), (53, 55), (55, 57), (57, 59), (59, 61), (61, 63), (63, 65), (65, 67), (67, 69), (69, 71), (71, 73), (73, 75), (75, 77), (77, 78), (78, 80), (80, 82), (82, 84), (84, -25), (87, 88), (88, 89), (89, -86), (103, 104), (104, 105), (105, -101), (109, 110), (110, 111), (111, 112), (112, -107), (116, 117), (117, 118), (118, 119), (119, -114), (123, 124), (135, -133), (135, 136), (136, 137), (137, 138), (138, 139), (139, 140), (140, 143), (143, 145), (145, -133), (150, -149), (150, 151), (151, 152), (152, 153), (153, 154), (154, 155), (155, 156), (156, 157), (157, 158), (158, 160), (160, -149), (164, 165), (165, 166), (166, -163), (172, -171)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/context.py LINES: 62 [39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 78, 80, 82, 84, 87, 88, 89, 103, 104, 105, 109, 110, 111, 112, 116, 117, 118, 119, 123, 124, 135, 136, 137, 138, 139, 140, 143, 145, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 164, 165, 166, 172]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/function_definitions/parse_public_function.py ARCS: 62 [(-277, 277), (-90, 101), (-68, 74), (74, 81), (81, -68), (81, 82), (82, 81), (101, 104), (104, 106), (106, 109), (109, 110), (110, 111), (110, 112), (111, 115), (112, 115), (115, 118), (118, 119), (118, 122), (119, 122), (122, 123), (123, 124), (123, 161), (124, 125), (125, 126), (126, 127), (127, 128), (128, 129), (129, 131), (131, 135), (135, 142), (142, 151), (151, 152), (152, 153), (153, 154), (154, 155), (155, 156), (156, 123), (161, 162), (161, 167), (162, 163), (163, 164), (164, 282), (167, 168), (167, 179), (168, 172), (172, 173), (173, -90), (173, 174), (174, 282), (179, 271), (271, 272), (272, 274), (274, 275), (275, 280), (277, -277), (277, 278), (278, -277), (278, 277), (280, -90), (280, 281), (281, 282), (282, -90)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/function_definitions/parse_public_function.py LINES: 49 [74, 81, 82, 101, 104, 106, 109, 110, 111, 112, 115, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 131, 135, 142, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 167, 168, 172, 173, 174, 179, 271, 272, 274, 275, 277, 278, 280, 281, 282]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/function_definitions/utils.py ARCS: 22 [(-45, 46), (-6, 7), (7, 9), (9, 10), (9, 16), (10, 11), (11, 12), (12, 13), (13, 19), (16, 17), (17, 19), (19, -6), (46, 47), (47, 48), (48, 49), (48, 55), (49, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, -45)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/function_definitions/utils.py LINES: 18 [7, 9, 10, 11, 12, 13, 16, 17, 19, 46, 47, 48, 49, 51, 52, 53, 54, 55]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/arg_clamps.py ARCS: 20 [(-26, 31), (31, 32), (32, 33), (33, 38), (38, 46), (46, 47), (46, 53), (47, 48), (48, 49), (49, 50), (50, -26), (53, 54), (53, 60), (54, 55), (55, 56), (56, 57), (57, -26), (60, 67), (67, 93), (93, -26)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/arg_clamps.py LINES: 17 [31, 32, 33, 38, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 60, 67, 93]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/lll_node.py ARCS: 156 [(-347, 347), (-312, 322), (-309, 310), (-264, 266), (-248, 250), (-237, 238), (-213, 213), (-194, 194), (-156, 156), (-54, 64), (-40, 41), (41, -40), (64, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74), (74, 75), (75, 76), (76, 79), (79, 80), (80, 86), (86, 87), (86, 89), (87, 88), (88, 221), (89, 91), (91, 92), (91, 131), (92, 93), (93, 94), (94, 100), (100, 101), (101, 105), (101, 113), (105, 106), (106, 111), (111, 101), (113, 116), (116, 119), (119, 120), (119, 122), (120, 128), (122, 128), (128, 221), (131, 132), (131, 145), (132, 133), (132, 134), (133, 134), (134, 135), (134, 136), (135, 136), (136, 141), (141, 143), (143, 221), (145, 146), (145, 158), (146, 148), (148, 150), (150, 155), (155, 156), (156, -156), (156, 156), (156, 221), (158, 159), (158, 192), (159, 160), (160, 161), (161, 162), (162, 165), (165, 166), (166, 167), (167, -54), (192, 193), (192, 196), (193, 194), (194, -194), (194, 194), (194, 221), (196, 205), (205, 206), (205, 210), (206, 207), (207, 221), (210, 211), (211, 212), (212, 213), (212, 214), (213, -213), (213, 213), (213, 214), (214, 221), (221, 223), (223, 224), (223, 226), (224, 226), (226, -54), (238, -237), (238, 239), (239, 240), (240, 241), (241, 242), (242, 243), (243, 244), (244, 245), (245, 246), (246, -237), (250, 252), (252, 253), (252, 254), (253, -248), (254, -248), (266, 268), (268, 271), (271, -264), (310, -309), (322, 323), (322, 325), (323, 325), (325, 326), (325, 333), (326, 328), (328, 329), (328, 330), (329, 330), (330, 331), (330, 332), (331, 332), (332, -312), (333, 334), (333, 345), (334, 335), (335, 336), (336, 337), (337, 338), (338, 339), (339, 340), (340, 341), (341, 342), (342, -312), (345, 346), (346, 347), (347, -347), (347, 347), (347, 348), (348, 349), (349, 350), (350, 351), (351, 352), (352, 353), (353, 354), (354, -312)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/lll_node.py LINES: 117 [41, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 86, 87, 88, 89, 91, 92, 93, 94, 100, 101, 105, 106, 111, 113, 116, 119, 120, 122, 128, 131, 132, 133, 134, 135, 136, 141, 143, 145, 146, 148, 150, 155, 156, 158, 159, 160, 161, 162, 165, 166, 167, 192, 193, 194, 196, 205, 206, 207, 210, 211, 212, 213, 214, 221, 223, 224, 226, 238, 239, 240, 241, 242, 243, 244, 245, 246, 250, 252, 253, 254, 266, 268, 271, 310, 322, 323, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/stmt.py ARCS: 219 [(-1005, 1006), (-1000, 1001), (-767, 768), (-764, 765), (-761, 762), (-594, 602), (-516, 521), (-512, 513), (-496, 497), (-484, 486), (-450, 451), (-373, 375), (-326, 327), (-189, 190), (-166, 167), (-155, 156), (-110, 111), (-105, 106), (-96, 97), (-93, 94), (-66, 67), (67, 68), (68, 70), (70, 71), (71, 72), (72, 73), (73, 74), (74, 75), (75, 76), (76, 77), (77, 78), (78, 79), (79, 80), (80, 81), (81, 82), (82, 83), (83, 84), (84, 85), (85, 87), (87, 88), (88, 89), (89, -66), (94, -93), (97, -96), (106, 108), (108, -105), (111, 116), (116, 129), (129, 134), (134, 142), (142, 143), (142, 147), (143, -110), (147, 148), (147, 153), (148, 149), (149, 150), (150, -110), (153, -110), (156, 157), (157, 158), (158, 164), (164, -155), (167, 168), (168, 169), (168, 173), (169, 170), (170, 171), (171, 172), (172, 187), (173, 176), (176, 179), (179, 180), (179, 184), (180, 181), (181, 182), (182, 183), (182, 187), (183, 182), (184, 185), (184, 187), (185, 186), (186, 187), (187, -166), (190, 191), (191, 192), (192, 193), (193, 194), (194, 195), (195, 196), (196, 198), (198, 203), (203, 204), (204, 205), (205, 206), (206, 211), (211, 214), (214, 224), (224, 228), (228, 235), (235, -189), (235, 236), (236, 237), (237, 238), (238, 239), (239, 240), (240, 241), (241, 243), (243, 246), (246, -189), (327, 329), (329, 330), (329, 331), (330, -326), (331, -326), (375, 379), (379, 382), (382, 383), (383, 384), (384, 387), (387, -373), (451, 454), (454, 460), (460, 464), (464, 465), (465, 466), (466, 467), (467, 468), (468, 469), (469, 471), (471, 472), (472, 473), (473, 474), (474, 476), (476, 477), (477, 478), (478, 479), (479, 482), (482, -450), (486, 487), (487, 489), (489, 490), (489, 491), (490, -484), (491, 494), (494, -484), (497, 499), (499, 502), (502, 503), (503, 505), (505, 506), (506, -496), (513, 514), (514, -512), (521, 524), (524, 525), (525, 526), (526, 527), (527, 528), (528, 529), (529, 531), (531, 537), (537, 538), (538, 540), (540, 541), (541, 544), (544, 545), (545, 546), (546, 547), (547, 581), (581, 582), (582, -516), (582, 583), (583, 584), (584, 585), (585, 586), (586, 587), (587, -516), (602, 603), (603, 605), (605, 609), (609, 614), (614, -594), (762, -761), (765, -764), (768, 777), (777, 780), (780, 783), (783, 784), (784, 786), (786, 791), (791, 797), (797, 798), (797, 814), (798, 804), (804, 806), (806, 807), (807, 808), (808, 810), (810, 811), (811, 812), (812, -767), (814, 815), (815, 816), (816, 817), (817, 818), (818, 819), (819, -767), (1001, -1000), (1006, 1007), (1006, 1008), (1007, -1005), (1008, 1009), (1009, 1010), (1009, 1012), (1010, -1005), (1010, 1011), (1011, 1009), (1012, -1005)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/stmt.py LINES: 184 [67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 94, 97, 106, 108, 111, 116, 129, 134, 142, 143, 147, 148, 149, 150, 153, 156, 157, 158, 164, 167, 168, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 198, 203, 204, 205, 206, 211, 214, 224, 228, 235, 236, 237, 238, 239, 240, 241, 243, 246, 327, 329, 330, 331, 375, 379, 382, 383, 384, 387, 451, 454, 460, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 476, 477, 478, 479, 482, 486, 487, 489, 490, 491, 494, 497, 499, 502, 503, 505, 506, 513, 514, 521, 524, 525, 526, 527, 528, 529, 531, 537, 538, 540, 541, 544, 545, 546, 547, 581, 582, 583, 584, 585, 586, 587, 602, 603, 605, 609, 614, 762, 765, 768, 777, 780, 783, 784, 786, 791, 797, 798, 804, 806, 807, 808, 810, 811, 812, 814, 815, 816, 817, 818, 819, 1001, 1006, 1007, 1008, 1009, 1010, 1011, 1012]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/expr.py ARCS: 236 [(-1138, 1140), (-1012, 1013), (-916, 918), (-797, 798), (-784, 787), (-438, 439), (-420, 421), (-282, 284), (-255, 257), (-217, 218), (-207, 208), (-114, 115), (-84, 85), (85, 86), (86, 88), (88, 89), (89, 90), (90, 91), (91, 92), (92, 93), (93, 94), (94, 95), (95, 96), (96, 97), (97, 98), (98, 99), (99, 100), (100, 101), (101, 102), (102, 103), (103, 105), (105, 106), (106, 107), (107, -84), (115, 117), (117, 119), (119, 120), (120, 121), (121, 122), (122, 123), (123, -114), (208, 209), (209, -207), (218, 219), (219, 220), (220, 221), (221, 222), (221, 227), (222, 223), (223, 224), (224, 225), (225, 221), (227, 228), (228, 229), (229, 230), (230, 231), (231, 232), (232, -217), (257, 259), (259, 270), (270, 271), (271, 272), (272, 273), (273, 274), (274, 275), (275, -255), (284, 298), (298, 299), (298, 318), (299, -282), (318, 319), (318, 333), (319, 324), (324, 325), (325, 326), (326, 327), (327, 328), (328, 329), (329, 330), (330, -282), (333, 334), (334, 335), (335, 339), (339, 349), (349, 355), (355, 361), (361, 362), (361, 367), (362, 363), (363, 364), (364, 365), (365, -282), (367, 368), (367, 369), (368, -282), (369, 370), (369, 371), (370, -282), (371, 377), (377, 378), (378, -282), (421, -420), (421, 422), (422, 427), (427, 429), (427, 436), (429, 430), (430, 432), (432, 433), (433, -420), (436, -420), (439, -438), (439, 440), (440, -438), (440, 442), (442, 443), (442, 448), (443, 444), (444, 445), (445, -438), (448, 451), (451, 452), (451, 483), (452, 453), (453, 483), (483, 501), (501, 502), (501, 507), (502, 503), (503, 504), (504, -438), (507, 508), (508, 509), (508, 547), (509, 514), (514, 519), (519, 522), (522, 524), (524, 525), (525, 532), (532, 539), (539, 540), (540, 541), (541, 542), (542, 543), (543, 680), (547, 548), (547, 585), (548, 550), (550, 551), (551, 561), (561, 567), (567, 568), (568, 569), (569, 570), (570, 571), (571, 573), (573, 575), (575, 576), (576, 578), (578, 582), (582, 680), (585, 614), (614, 615), (615, 620), (620, 622), (622, 623), (623, 629), (629, 630), (630, 631), (631, 632), (632, 633), (633, 680), (680, 682), (682, 684), (684, 687), (687, 695), (695, 696), (696, 697), (697, 698), (698, 699), (699, 700), (700, 702), (702, -438), (787, 788), (788, 789), (789, 790), (790, 792), (792, 795), (795, -784), (798, -797), (798, 799), (799, -797), (799, 801), (801, 807), (807, 811), (811, 819), (819, 822), (822, 827), (827, 829), (829, 830), (829, 831), (830, 843), (831, 833), (833, 835), (835, 836), (836, 843), (843, 882), (882, 885), (885, 888), (888, 900), (900, 901), (900, 902), (901, 908), (902, 908), (908, 909), (909, -797), (918, 920), (920, 927), (927, -916), (927, 928), (928, 929), (929, 930), (930, 931), (931, -916), (1013, 1017), (1017, 1018), (1018, 1020), (1020, 1021), (1020, 1024), (1021, -1012), (1024, 1041), (1041, 1052), (1052, 1053), (1053, -1012), (1140, -1138)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/expr.py LINES: 202 [85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 115, 117, 119, 120, 121, 122, 123, 208, 209, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 257, 259, 270, 271, 272, 273, 274, 275, 284, 298, 299, 318, 319, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 339, 349, 355, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 377, 378, 421, 422, 427, 429, 430, 432, 433, 436, 439, 440, 442, 443, 444, 445, 448, 451, 452, 453, 483, 501, 502, 503, 504, 507, 508, 509, 514, 519, 522, 524, 525, 532, 539, 540, 541, 542, 543, 547, 548, 550, 551, 561, 567, 568, 569, 570, 571, 573, 575, 576, 578, 582, 585, 614, 615, 620, 622, 623, 629, 630, 631, 632, 633, 680, 682, 684, 687, 695, 696, 697, 698, 699, 700, 702, 787, 788, 789, 790, 792, 795, 798, 799, 801, 807, 811, 819, 822, 827, 829, 830, 831, 833, 835, 836, 843, 882, 885, 888, 900, 901, 902, 908, 909, 918, 920, 927, 928, 929, 930, 931, 1013, 1017, 1018, 1020, 1021, 1024, 1041, 1052, 1053, 1140]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/signatures/sig_utils.py ARCS: 32 [(-66, 68), (-61, 62), (-15, 17), (17, 18), (18, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, -15), (62, -61), (68, 70), (70, 72), (72, 73), (73, 76), (76, 81), (81, 82), (81, 93), (82, 83), (83, 84), (84, 85), (85, 86), (86, 87), (87, 89), (89, 81), (89, 90), (90, 91), (91, 81), (91, 92), (92, 91), (93, -66)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/signatures/sig_utils.py LINES: 26 [17, 18, 20, 21, 22, 23, 24, 25, 62, 68, 70, 72, 73, 76, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/optimizer.py ARCS: 98 [(-105, 105), (-104, 105), (-100, 101), (-86, 91), (-76, 79), (-27, 28), (-11, 12), (12, 14), (14, 15), (14, 16), (15, 21), (16, 17), (17, 21), (21, 22), (21, 24), (22, -11), (24, -11), (28, -27), (79, -76), (91, -86), (101, -100), (105, -105), (105, -104), (105, 105), (105, 106), (106, 107), (106, 130), (107, 108), (108, 109), (109, 110), (110, 112), (112, 119), (119, 120), (120, 121), (121, 122), (122, 123), (123, 124), (124, 125), (125, 126), (126, 127), (127, 128), (128, -104), (130, 154), (154, 165), (165, 176), (176, 177), (176, 183), (177, 179), (179, 180), (180, -104), (183, 197), (197, 212), (212, 225), (225, 235), (235, 242), (242, 243), (242, 259), (243, 244), (244, 245), (244, 249), (245, 246), (245, 247), (246, 244), (247, 244), (247, 248), (248, 244), (249, 250), (250, 251), (251, 252), (252, 253), (253, 254), (254, 255), (255, 256), (256, 257), (257, -104), (259, 260), (259, 274), (260, 261), (261, 262), (262, 263), (263, 264), (264, 265), (265, 266), (266, 267), (267, 268), (268, 270), (270, 271), (271, 272), (272, -104), (274, 275), (275, 276), (276, 277), (277, 278), (278, 279), (279, 280), (280, 281), (281, 282), (282, -104)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/optimizer.py LINES: 79 [12, 14, 15, 16, 17, 21, 22, 24, 28, 79, 91, 101, 105, 106, 107, 108, 109, 110, 112, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 154, 165, 176, 177, 179, 180, 183, 197, 212, 225, 235, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/compile_lll.py ARCS: 251 [(-482, 484), (-470, 472), (-458, 460), (-90, 92), (-82, 82), (-77, 79), (-68, 69), (-65, 66), (-51, 52), (-47, 48), (-36, 37), (-28, 29), (29, 30), (30, 31), (30, 33), (31, 32), (32, 30), (33, -28), (37, 38), (38, -36), (48, -47), (52, 53), (53, 54), (54, 55), (55, 56), (56, 59), (59, 60), (60, -51), (66, -65), (69, 70), (70, 71), (70, 73), (71, -68), (73, -68), (79, 80), (80, -77), (80, 82), (82, -82), (82, 83), (83, 82), (83, 85), (85, -77), (92, 93), (92, 94), (93, 94), (94, 97), (97, 98), (97, 99), (98, 99), (99, 103), (103, 104), (103, 110), (104, 105), (105, 106), (105, 107), (106, -90), (106, 105), (107, 108), (108, -90), (110, 111), (110, 118), (111, 113), (113, 115), (115, 116), (116, -90), (118, 123), (123, 131), (131, 132), (131, 134), (132, -90), (134, 137), (137, 146), (146, 147), (146, 155), (147, 148), (148, 149), (149, 150), (150, 151), (151, -90), (151, 152), (152, 153), (153, -90), (155, 168), (168, 199), (199, 200), (199, 205), (200, 201), (201, -90), (205, 206), (205, 211), (206, 207), (207, -90), (211, 233), (233, 234), (233, 245), (234, 235), (235, 236), (236, 237), (237, 239), (239, -90), (239, 240), (240, 241), (241, 242), (242, 243), (243, -90), (245, 246), (245, 253), (246, 247), (247, 248), (247, 251), (248, -90), (248, 249), (249, 247), (249, 250), (250, 247), (251, -90), (253, 254), (253, 261), (254, 255), (255, 256), (255, 259), (256, -90), (256, 255), (259, -90), (261, 273), (273, 274), (273, 277), (274, 275), (275, 276), (276, -90), (277, 284), (284, 285), (284, 328), (285, 303), (303, 304), (304, 305), (305, 307), (307, 309), (309, 310), (310, 325), (325, 326), (326, -90), (328, 345), (345, 351), (351, 362), (362, 376), (376, 384), (384, 392), (392, 400), (400, 401), (400, 408), (401, 403), (403, 404), (404, 406), (406, -90), (408, 416), (416, 428), (428, 430), (428, 433), (430, 431), (431, -90), (433, 436), (436, 437), (437, 439), (439, 442), (442, 445), (445, 446), (446, -90), (460, 461), (460, 466), (461, 462), (461, 464), (462, 465), (464, 465), (465, 466), (466, 467), (467, -458), (472, -470), (484, 485), (485, 486), (486, 487), (487, 489), (489, 490), (490, 491), (491, 492), (492, 493), (493, 494), (493, 527), (494, 495), (495, 498), (498, 499), (498, 506), (499, 500), (500, 501), (500, 502), (501, 509), (502, 505), (505, 509), (506, 507), (506, 509), (507, 509), (509, 510), (509, 515), (510, 512), (510, 514), (512, 493), (514, 493), (515, 516), (515, 517), (516, 493), (517, 518), (517, 525), (518, 519), (519, 520), (520, 521), (521, 522), (522, 493), (522, 523), (523, 522), (525, 493), (527, 528), (528, 529), (529, 530), (529, 556), (530, 532), (532, 533), (532, 535), (533, 529), (533, 534), (534, 529), (535, 536), (535, 537), (536, 529), (537, 538), (537, 539), (538, 529), (539, 541), (541, 543), (543, 545), (545, 546), (545, 547), (546, 529), (547, 548), (548, 549), (549, 550), (550, 551), (551, 529), (556, 557), (557, 558), (558, 559), (559, -482)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/compile_lll.py LINES: 193 [29, 30, 31, 32, 33, 37, 38, 48, 52, 53, 54, 55, 56, 59, 60, 66, 69, 70, 71, 73, 79, 80, 82, 83, 85, 92, 93, 94, 97, 98, 99, 103, 104, 105, 106, 107, 108, 110, 111, 113, 115, 116, 118, 123, 131, 132, 134, 137, 146, 147, 148, 149, 150, 151, 152, 153, 155, 168, 199, 200, 201, 205, 206, 207, 211, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 259, 261, 273, 274, 275, 276, 277, 284, 285, 303, 304, 305, 307, 309, 310, 325, 326, 328, 345, 351, 362, 376, 384, 392, 400, 401, 403, 404, 406, 408, 416, 428, 430, 431, 433, 436, 437, 439, 442, 445, 446, 460, 461, 462, 464, 465, 466, 467, 472, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 505, 506, 507, 509, 510, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 541, 543, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/functions/signatures.py ARCS: 68 [(-145, 145), (-118, 120), (-35, 36), (36, 38), (38, 39), (38, 41), (39, 41), (41, 42), (42, 43), (42, 104), (43, 44), (43, 48), (44, 45), (45, -35), (48, 49), (48, 59), (49, 42), (59, 60), (59, 62), (60, 42), (62, 67), (67, 68), (67, 69), (68, -35), (69, 70), (69, 73), (70, -35), (73, 79), (79, 80), (80, 81), (81, 83), (83, 84), (84, -35), (84, 88), (88, 90), (88, 96), (90, 92), (90, 96), (92, 96), (96, 97), (96, 98), (97, -35), (98, 42), (98, 99), (99, -35), (104, 105), (105, 106), (106, 107), (107, -35), (120, 121), (121, 127), (127, 128), (128, 129), (128, 144), (129, 130), (130, 131), (131, 132), (132, 133), (133, 134), (134, 135), (135, -118), (135, 128), (144, 145), (145, -145), (145, 146), (146, 155), (155, 159), (159, -118)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/functions/signatures.py LINES: 50 [36, 38, 39, 41, 42, 43, 44, 45, 48, 49, 59, 60, 62, 67, 68, 69, 70, 73, 79, 80, 81, 83, 84, 88, 90, 92, 96, 97, 98, 99, 104, 105, 106, 107, 120, 121, 127, 128, 129, 130, 131, 132, 133, 134, 135, 144, 145, 146, 155, 159]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/exceptions.py ARCS: 18 [(-100, 101), (-21, 22), (-9, 10), (10, 11), (11, 12), (12, 14), (14, 15), (14, 16), (15, -9), (16, 17), (17, 18), (18, 19), (19, -9), (22, 23), (23, 25), (25, 26), (26, -21), (101, -100)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/exceptions.py LINES: 14 [10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 23, 25, 26, 101]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/functions/functions.py ARCS: 17 [(-1013, 1015), (-1008, 1010), (-743, 745), (-125, 126), (-101, 103), (103, 105), (105, 106), (106, 107), (107, 108), (108, 110), (110, 111), (111, -101), (126, -125), (745, 750), (750, -743), (1010, -1008), (1015, -1013)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/functions/functions.py LINES: 12 [103, 105, 106, 107, 108, 110, 111, 126, 745, 750, 1010, 1015]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/function_definitions/parse_private_function.py ARCS: 60 [(-276, 276), (-140, 140), (-73, 84), (-65, 67), (-49, 59), (59, 60), (60, 61), (60, 62), (61, 60), (62, -49), (67, -65), (84, 87), (87, 91), (91, 94), (94, 96), (96, 97), (97, 98), (98, 99), (99, 100), (100, 101), (101, 104), (104, 110), (110, 111), (110, 113), (111, 116), (113, 116), (116, 117), (116, 119), (117, 118), (118, 127), (119, 120), (120, 121), (121, 122), (122, 124), (124, 127), (127, 128), (127, 140), (128, 132), (132, 133), (133, 134), (134, 135), (135, 136), (136, 127), (140, -140), (140, 140), (140, 141), (141, 163), (163, 270), (270, 271), (271, 273), (273, 274), (274, 279), (276, -276), (276, 277), (277, -276), (277, 276), (279, -73), (279, 280), (280, 282), (282, -73)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/parser/function_definitions/parse_private_function.py LINES: 46 [59, 60, 61, 62, 67, 84, 87, 91, 94, 96, 97, 98, 99, 100, 101, 104, 110, 111, 113, 116, 117, 118, 119, 120, 121, 122, 124, 127, 128, 132, 133, 134, 135, 136, 140, 141, 163, 270, 271, 273, 274, 276, 277, 279, 280, 282]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/types/convert.py ARCS: 15 [(-417, 418), (-171, 173), (173, 174), (174, 175), (175, 177), (177, 178), (178, 186), (186, 195), (195, -171), (418, 420), (420, 427), (427, 428), (428, 434), (434, 435), (435, -417)]
/Users/adg326/vyper-venv/lib/python3.7/site-packages/vyper/types/convert.py LINES: 13 [173, 174, 175, 177, 178, 186, 195, 418, 420, 427, 428, 434, 435]
TSTL BRANCH COUNT: 3620
TSTL STATEMENT COUNT: 2805
20.36727879799666 PERCENT COVERED
TEST failure.17521.reduced.test REDUNDANT WITH RESPECT TO COVERAGE
TEST failure.2122.reduced.test REDUNDANT WITH RESPECT TO COVERAGE
TEST failure.25492.reduced.test REDUNDANT WITH RESPECT TO COVERAGE
TEST failure.35615.reduced.test REDUNDANT WITH RESPECT TO COVERAGE
TEST failure.41523.2.test REDUNDANT WITH RESPECT TO COVERAGE
TEST failure.41523.3.test REDUNDANT WITH RESPECT TO COVERAGE
TEST failure.41523.4.test REDUNDANT WITH RESPECT TO COVERAGE
TEST failure.41523.reduced.test REDUNDANT WITH RESPECT TO COVERAGE
TEST failure.43989.reduced.test REDUNDANT WITH RESPECT TO COVERAGE
TEST failure.59270.0.test REDUNDANT WITH RESPECT TO COVERAGE
TEST failure.59270.reduced.test REDUNDANT WITH RESPECT TO COVERAGE
TEST failure.64110.0.test REDUNDANT WITH RESPECT TO COVERAGE
TEST failure.64110.reduced.test REDUNDANT WITH RESPECT TO COVERAGE
TEST failure.96119.reduced.test REDUNDANT WITH RESPECT TO COVERAGE

20 TESTS NEEDED FOR FULL COVERAGE: failure.17521.0.test, failure.17521.full.test, failure.2122.0.test, failure.2122.full.test, failure.25492.0.test, failure.25492.full.test, failure.35615.0.test, failure.35615.1.test, failure.35615.2.test, failure.35615.full.test, failure.41523.0.test, failure.41523.1.test, failure.41523.full.test, failure.43989.0.test, failure.43989.full.test, failure.59270.full.test, failure.64110.1.test, failure.64110.full.test, failure.96119.0.test, failure.96119.full.test

EXECUTED 34 TESTS
34 FAILED TESTS:
failure.17521.0.test failure.17521.full.test failure.17521.reduced.test failure.2122.0.test failure.2122.full.test failure.2122.reduced.test failure.25492.0.test failure.25492.full.test failure.25492.reduced.test failure.35615.0.test failure.35615.1.test failure.35615.2.test failure.35615.full.test failure.35615.reduced.test failure.41523.0.test failure.41523.1.test failure.41523.2.test failure.41523.3.test failure.41523.4.test failure.41523.full.test failure.41523.reduced.test failure.43989.0.test failure.43989.full.test failure.43989.reduced.test failure.59270.0.test failure.59270.full.test failure.59270.reduced.test failure.64110.0.test failure.64110.1.test failure.64110.full.test failure.64110.reduced.test failure.96119.0.test failure.96119.full.test failure.96119.reduced.test 
