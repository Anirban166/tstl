@import bidict
@from bidict import ValueDuplicationError
@from bidict import KeyDuplicationError
@from bidict import KeyAndValueDuplicationError
@from bidict import RAISE, DROP_OLD, DROP_NEW

pool: <bidict> 5
pool: <value> 5

pool: <int> 5
pool: <string> 5
pool: <tuple> 5

pool: <updates> 5

pool: <mode> 3

<int> := <[1..20]>
<int> *= 10
<int> += 1
<int> -= 1

<string> := ''
<string> += <['a'..'z']>
<string> += <string>

<tuple> := (<value>,<value>)
<tuple> := (<value>,<value>,<value>)

<updates> := []
~<updates>.append((<value>,<value>))

<value> := <int>
<value> := <string>
<value> := <tuple>

<mode> := RAISE
<mode> := DROP_NEW
<mode> := DROP_OLD

<bidict> := bidict.bidict()
<bidict> := bidict.loosebidict()
<bidict> := bidict.orderedbidict()
<bidict> := <bidict>.copy()

{ValueDuplicationError} <bidict>.setdefault(<value>)
{ValueDuplicationError} <bidict>.setdefault(<value>,<value>)

{ValueDuplicationError} <bidict> [<value>] = <value> # UNSAFE
<value,2> not in <bidict,1>.inv -> <bidict> [<value>] = <value>



{ValueDuplicationError,KeyDuplicationError,KeyAndValueDuplicationError} <bidict>.put(<value>,<value>,on_dup=<mode>,val=<mode>,kv=<mode>)
{ValueDuplicationError,KeyDuplicationError,KeyAndValueDuplicationError} <bidict>.putall(<updates>,on_dup=<mode>,val=<mode>,kv=<mode>)

{ValueDuplicationError} <bidict>.inv [<value>] = <value> # UNSAFE
<value,2> not in <bidict,1> -> <bidict>.inv [<value>] = <value>

<value> in <bidict>
<value> in <bidict>.inv

<bidict>.keys()
<bidict>.inv.keys()

<bidict>.values()
<bidict>.inv.values()

<bidict> == <bidict>
<bidict> != <bidict>

{KeyError} <bidict>.pop(<value>) # UNSAFE
<value,1> in <bidict,1> -> <bidict>.pop(<value>)

{KeyError} del <bidict> [<value>] # UNSAFE
<value,1> in <bidict,1> -> del <bidict> [<value>]

<bidict>.forceput(<value>,<value>)
<bidict>.inv.forceput(<value>,<value>)

{ValueDuplicationError} <bidict>.update(<bidict>)
{ValueDuplicationError} <bidict>.update(<updates>)

<bidict>.forceupdate(<bidict>)
<bidict>.forceupdate(<updates>)

<bidict>.clear()

<bidict>.__iter__()

repr(<bidict>)

str(<bidict>)

<bidict>.items()
<bidict>.iteritems()
<bidict>.iterkeys()
<bidict>.itervalues()

<bidict>.inv.items()
<bidict>.inv.iteritems()
<bidict>.inv.iterkeys()
<bidict>.inv.itervalues()

<bidict>.viewitems()
<bidict>.viewkeys()
<bidict>.viewvalues()

<bidict>.inv.viewitems()
<bidict>.inv.viewkeys()
<bidict>.inv.viewvalues()

